################################################################################
# Copyrights Â© 2021-2022 Fiserv, Inc. or its affiliates.
# Fiserv is a trademark of Fiserv, Inc.,
# registered or used in the United States and foreign countries,
# and may or may not be registered in your country.
# All trademarks, service marks,
# and trade names referenced in this
# material are the property of their
# respective owners. This work, including its contents
# and programming, is confidential and its use
# is strictly limited. This work is furnished only
# for use by duly authorized licensees of Fiserv, Inc.
# or its affiliates, and their designated agents
# or employees responsible for installation or
# operation of the products. Any other use,
# duplication, or dissemination without the
# prior written consent of Fiserv, Inc.
# or its affiliates is strictly prohibited.
# Except as specified by the agreement under
# which the materials are furnished, Fiserv, Inc.
# and its affiliates do not accept any liabilities
# with respect to the information contained herein
# and are not responsible for any direct, indirect,
# special, consequential or exemplary damages
# resulting from the use of this information.
# No warranties, either express or implied,
# are granted or extended by this work or
# the delivery of this work
################################################################################

openapi: 3.0.2
info:
  title: CardPointe Integrated Terminal API
  description: This API documentation provides technical guidance for integrating the CardPointe Integrated Terminal solution with your application.
  version: 1.0.0
servers:
 - url: https://<site>-uat.cardpointe.com/
 - description: UAT Environment
paths:
  /api/v2/listTerminals:
    post:
      tags:
        - listTerminals Endpoint Definition
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: listTerminals
      summary: The listTerminals endpoint returns an array of Hardware Serial Numbers (HSNs) for each terminal for the specified <bold>Merchant ID</bold>.
      description: |
        The <code>listTerminals</code> endpoint returns an array of Hardware Serial Numbers (HSNs) for each terminal for the specified Merchant ID.
        This array can be displayed to prompt a user to select the terminal HSN to pair or use with the POS application.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listTerminalsRequest'
            examples:
              listTerminals Example:
                $ref: '#/components/examples/listTerminalsExample'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/listTerminalsSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v3/terminalDetails:
    post:
      tags:
        - terminalDetails Endpoint Definition
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: terminalDetails
      summary: The terminalDetails endpoint returns an array of terminals for the specified <bold>Merchant ID</bold>.
      description: |
        A call to the <code>terminalDetails</code> endpoint returns an array of terminals associated with the Merchant ID specified in the request. The response includes one or more objects containing the hardware serial number (HSN), model, status, and features supported for each device. 
        This can be useful for merchants with multiple terminal models, to determine which supports signature capture or receipt printing, or for merchants with multiple locations, who need to determine which terminals are associated with each merchant ID. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/terminalDetailsRequest'
            examples:
              terminalDetails Example:
                $ref: '#/components/examples/terminalDetailsExample'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/terminalDetailsSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/dateTime:
    post:
      tags:
        - dateTime Endpoint Definition
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: dateTime
      summary: "The dateTime endpoint sends a request to change a terminal's date and time."
      description: |
        A call to the <code>dateTime</code> endpoint sends a request to the specified terminal to set the system time for a terminal.
        You should include the <code>dateTime</code> request into your terminal connection workflow to ensure that the time for a terminal is accurate for transaction reporting and receipts, and to ensure that the nightly PCI reboot for the terminal occurs outside of your business hours, as intended.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dateTimeRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}  
  /api/v2/getPanPadVersion:
    post:
      tags:
        - getPanPadVersion
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: getPanPadVersion
      summary: Returns PanPad version number
      description: |+
        A call to the <code>getPanPadVersion</code> endpoint returns the version of the terminal application running on the specified Ingenico terminal.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/getPanPadVersionRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/getPanPadVersionSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/ping:
    post:
      tags:
        - ping
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: ping
      summary: A call to the ping endpoint sends a ping command to the specified terminal. The response is true if communication with the terminal is successful. 
      description: |
        A call to the <code>ping</code> endpoint sends a ping command to the specified terminal. The response is true if communication with the terminal is successful. 
        You might want to send intermittent ping requests to the terminal to monitor the connection of the terminal to the terminal service.      
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/ping'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/pingSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/preconnect:
    post:
      tags:
        - preconnect
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: preconnect
      summary: The preconnect endpoint initiates a two-factor authentication process between the terminal and the terminal service.
      description: |
        The <code>preconnect</code> endpoint initiates a two-factor authentication process between the terminal and the terminal service. a successful response displays a 6 character alpha-numeric token on the terminal, which must then be used to make a connect request to establish a session with the terminal service. The token displays for 60 seconds (configurable), or until a successful connect request is made. 

        To use this feature, two-factor authentication must be enabled for the merchant. Note that two-factor authentication is required when it is enabled.

        * The preconnect endpoint is currently <bold>NOT</bold> supported for Clover terminals.
        
        * The preconnect endpoint is <bold>NOT</bold> required for Ingenico terminals. To use this feature, two-factor authentication must be enabled for the merchant. Note that two-factor authentication is required when it is enabled.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/preconnectRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/preconnectSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/connect:
    post:
      tags:
        - connect
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: connect
      summary: A call to the connect endpoint establishes a session between the terminal and the terminal service. The response returns a session key to use in subsequent requests to the terminal.
      description: |
        A call to the <code>connect</code> endpoint establishes a session between the terminal and the terminal service. The response returns a session key to use in subsequent requests to the terminal.

        For example, if the response header returns 

        <bold>X-CardConnect-SessionKey âf4fb39ff5c9c4299b3d7b34ca7ce2348;expires=2018-09-25T16:26:48.482Z</bold>

        Then each subsequent request header must be:

        <bold>X-CardConnect-SessionKey: f4fb39ff5c9c4299b3d7b34ca7ce2348</bold>

        If you use the <code>preconnect</code> endpoint to obtain an authorization token for two-factor authentication, you must also include the token in the <code>connect</code> request.
        
        If force is set to true, any existing sessions will be destroyed and all in-flight operations on the terminal will be cancelled. The force parameter is optional and defaults to false.
        
        See Establishing a Session for more information.
        
        Once the session is complete, call the disconnect endpoint to end the session. Otherwise, the session key will expire at the the ISO-8601 expiration timestamp included in the initial connect response.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/connectRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
      responses:
        200: 
          description: Success
          headers:
            X-CardConnect-SessionKey:
              schema:
                type: integer
                example: âf4fb39ff5c9c4299b3d7b34ca7ce2348;expires=2018-09-25T16:26:48.482Z
              description: The session key for the established connection.
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/disconnect:
    post:
      tags:
        - disconnect
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: disconnect
      summary: A call to the disconnect endpoint closes the session and releases the session key provided in the request header.

      description: |
        A call to the <code>disconnect</code> endpoint closes the session and releases the session key provided in the request header. The session key can not be used in any subsequent requests; you must call the connect endpoint to retrieve a new session key.
        
        * The disconnect command <bold>does not</bold> cancel an in-flight transaction (for example an <bold>authCard</bold> request in progress). To terminate an in-flight transaction, call the <bold>cancel</bold> endpoint.

      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/disconnectRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/display:
    post:
      tags:
        - display
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: display
      summary: A call to the display endpoint sends a text string, which is displayed on the idle terminal. 
      description: |
        A call to the <bold>display</bold> endpoint sends a text string, which is displayed on the idle terminal.
        
        On a Clover terminal, sending either a single or multi-line message replaces the idle image with the message, along with the logo image (if one is configured for the device).
        
        On an Ingenico terminal:
        
        Sending a single-line string displays the text in the display footer area, retaining the idle image.
        
        Sending a multi-line string displays the text in the primary display area, replacing the idle image.
        
        Additionally, you can send a blank string, which clears any existing prompts and returns the terminal display to an idle state. You can also call the clearDisplay endpoint to clear the terminal display.
        
        * For Ingenico terminals, to include a percent sign (%) in the display text, you must include two percent signs (%%) in the request. If you include a single percent sign, the terminal will display an unexpected message string.
        
        * The terminal display is limited to 1000 characters.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/displayRequest'
            examples:
              Single Line:
                summary: display (Single Line) Request
                $ref: '#/components/examples/displaySingleLineRequestExample'
              Line Break:
                summary: display (Line Break) Request
                $ref: '#/components/examples/displayLineBreakRequestExample'
              Clear:
                summary: display (Clear) Request
                $ref: '#/components/examples/displayClearRequestExample'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v3/clearDisplay:
    post:
      tags:
        - clearDisplay
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: clearDisplay
      summary: A call to the clearDisplay endpoint sends a display command to the terminal with an empty string. This clears the current display prompt. 
      description: |
        A call to the <code>clearDisplay</code> endpoint sends a display command to the terminal with an empty string. This clears the current display prompt.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/clearDisplayRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'} 
  /api/v3/readConfirmation:
    post:
      tags:
        - readConfirmation
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: readConfirmation
      summary: A call to the readConfirmation endpoint retrieves a confirmation response (either true or false) from the specified terminal.
      description: |
        A call to the <code>readConfirmation</code> endpoint retrieves a confirmation response (either true or false) from the specified terminal.
        Ensure that you allow at least a 1 second delay after sending the readConfirmation command, before sending a subsequent command (for example, authCard), to prevent "terminal in use" errors.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/readConfirmationRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content: 
            application/json:
              schema: {$ref: '#/components/schemas/readConfirmationSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}  
  /api/v2/readInput: 
    post:
      tags:
        - readInput
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: readInput
      summary: A call to the readInput endpoint sends a prompt to the terminal to request user input, in a format specified in the request.
      description: |
        A call to the readInput endpoint sends a prompt to the terminal to request user input, in a format specified in the request.
        See <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#using-readinput-to-capture-customer-information">Using readInput to Capture Customer Information</a> for more information.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/readInputRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content: 
            application/json:
              schema: {$ref: '#/components/schemas/readInputSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}  
  /api/v2/readSignature:
    post:
      tags:
        - readSignature
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: readSignature
      summary: A call to the readSignature endpoint sends a prompt to the terminal to capture the cardholder's signature, which is then returned in the response.
      description: |
        A call to the <code>readSignature</code> endpoint sends a prompt to the terminal to capture the cardholder's signature, which is then returned in the response. The readSignature endpoint is supported for terminal devices that support signature capture.

        See <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#capturing-and-handling-cardholder-signatures">Capturing and Handling Cardholder Signatures</a> for guidance on how and when to capture signatures.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/readSignatureRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/readSignatureSuccess'
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/cancel:
    post:
      tags:
        - cancel
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: cancel
      summary: A call to the cancel endpoint sends a cancel command from the POS software to terminate any in-flight operations. 
      description: |
        A call to the cancel endpoint sends a cancel command from the POS software to terminate any in-flight operations. 
        
        If you use the cancel command to allow a merchant or cardholder to attempt to cancel a transaction in progress, you should also use the CardPointe Gateway API's <code>inquireByOrderid</code> request to verify the status of the transaction. A transaction cannot be canceled if the terminal service has already initiated the authorization request to the CardPointe Gateway; however, you can use the <code>inquireByOrderid</code> request to check the status of the transaction and void if necessary.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/getPanPadVersionRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/readCard:
    post:
      tags:
        - readCard
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: readCard
      summary: A call to the readCard endpoint initiates an MSR (magnetic stripe), EMV (chip), or NFC (contactless) payment card interaction and returns a token to be used in a subsequent authorization request to the CardPointe Gateway.  
      description: |
        A call to the readCard endpoint initiates an MSR (magnetic stripe), EMV (chip), or NFC (contactless) payment card interaction and returns a token to be used in a subsequent authorization request to the CardPointe Gateway. The readCard endpoint does not initiate an authorization or capture funds. 

        To authorize and capture a transaction, call the authCard endpoint.

        See Using the <a href= "../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#understanding-the-terminal-api-service-endpoints">Terminal API Tokenization and Payment Endpoints</a> for more information.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/readCardRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/readCardSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v2/readManual:
    post:
      tags:
        - readManual
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: readManual
      summary: A call to the readManual endpoint requests manually-keyed card data and returns a token to be used in a subsequent authorization request to the CardPointe Gateway.
      description: |
        A call to the readManual endpoint requests manually-keyed card data and returns a token to be used in a subsequent authorization request to the CardPointe Gateway. The readManual endpoint does not initiate an authorization or capture funds. To authorize and capture a transaction, call the authManual endpoint.

        See Using the <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#understanding-the-terminal-api-service-endpoints">Terminal API Tokenization and Payment Endpoints</a> for more information.
        
        WARNING: The readManual endpoint is currently not supported for Clover terminals. See the <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuideForCloverTerminals.md&branch=develop">CardPointe Integrated Terminal Developer Guide for Clover Terminals</a> for more information.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/readManualRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/readManualSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v3/authCard:
    post:
      tags:
        - authCard
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: authCard
      summary: A call to the authCard endpoint initiates an MSR (magnetic stripe), EMV (chip), or NFC (contactless) payment card interaction and initiates an authorization request to the CardPointe Gateway.
      description: |
        A call to the authCard endpoint initiates an MSR (magnetic stripe), EMV (chip), or NFC (contactless) payment card interaction and initiates an authorization request to the CardPointe Gateway.

        See Using the <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#understanding-the-terminal-api-service-endpoints">Terminal API Tokenization and Payment Endpoints</a> for more information.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/authCardRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/authCardSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v3/authManual:
    post:
      tags:
        - authManual
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: authManual
      summary: A call to the authManual endpoint requests manually-entered card data and initiates Authorization request to the CardPointe Gateway.
      description: |
        A call to the authManual endpoint requests manually-entered card data and initiates Authorization request to the CardPointe Gateway.

        See Using the <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#understanding-the-terminal-api-service-endpoints">Terminal API Tokenization and Payment Endpoints</a> for more information.
        
        The Terminal API does not provide the ability to void or inquire on transactions. See the <a href="../api/?type=post&path=/cardpointegatewayapi">CardPointe Gateway API</a> for information on integrating these features and other advanced capabilities.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/authManualRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/authManualSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v3/tip:
    post:
      tags:
        - tip
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: tip
      summary: A call to the tip endpoint prompts the user to specify a tip amount on the terminal.
      description: |
        A call to the tip endpoint prompts the user to specify a tip amount on the terminal.

        See Using the <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#understanding-the-terminal-api-service-endpoints">Terminal API Tokenization and Payment Endpoints</a> for more information.
        
        For Ingenico terminals, the tip endpoint is only supported on terminals running firmware version 1.6.3.4 or higher.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/tipRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/tipSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
  /api/v3/printReceipt:
    post:
      tags:
        - printReceipt
      x-group-name: CardPointe Integrated Terminal API
      x-proxy-name: printReceipt
      summary: A call to the printReceipt endpoint prints one or two receipts for a past transaction, specified by the orderId.
      description: |
        A call to the printReceipt endpoint prints one or two receipts for a past transaction, specified by the orderId.

        The printReceipt endpoint is only supported for Clover terminals. See the <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuideForCloverTerminals.md&branch=develop">CardPointe Integrated Terminal Developer Guide for Clover Terminals</a> for more information on printing receipts.
      requestBody:
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/printReceiptRequest'
      parameters:
        - {$ref: '#/components/parameters/ContentTypeHeader'}
        - {$ref: '#/components/parameters/Authorization'}
        - {$ref: '#/components/parameters/X-CardConnect-SessionKey'}
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: {$ref: '#/components/schemas/printReceiptSuccess'}
        400:
          description: Not Found
          content:
            application/json:
              schema: {$ref: '#/components/schemas/NotFoundError'}
        404:
          description: Bad Request
          content:  
            application/json:
              schema: {$ref: '#/components/schemas/BadRequestError'}
components:
  parameters:
    Authorization:
      x-model-version: 1.0 
      name: Authorization
      schema: {type: integer, format: int64}
      in: header
      required: true
      description: The Terminal API Authorization Key
    TimestampHeader:
      x-model-version: 1.0
      name: Timestamp
      schema: {type: integer, format: int64}
      in: header
      required: true
      description: Epoch timestamp in milliseconds in the request from a client system.
        Used for authorization header generation and time limit (5 minutes).
    X-CardConnect-SessionKey:
      x-model-version: 1.0
      name: X-CardConnect-SessionKey
      in: header
      schema: {type: integer, format: int64}
      required: true
      description: The session key returned by the **connect** endpoint.
    MessageDigestHeader:
      x-model-version: 1.0
      name: Message-Digest
      schema: {
        type: string,
        default: "Message-Digest"
       }
      in: header
      required: false
      description: Needed only from customer browser or app to the API in Hosted Payment
        Page requests.
    AcceptLanguageHeader:
      x-model-version: 1.0
      name: Accept-Language
      schema: {
        type: string,
        default: "Accept-Language"
       }
      in: header
      required: false
      description: The Accept Language header contains information about the language
        preference of a user. This HTTP header is useful to multilingual sites for
        deciding the best language to serve to the client. For example en-US or fr-CA.
    ApiKeyHeader:
      x-model-version: 1.0
      name: Api-Key
      schema: {
        type: string,
        default: "Api-Key"
       }
      in: header
      required: true
      description: API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.
    ContentTypeHeader:
      x-model-version: 1.0
      name: Content-Type
      schema:
        type: string
        enum: [application/json]
        default: application/json
      in: header
      required: true
      description: The content type. Valid value (application/json).
    AccountParam:
      x-model-version: 1.0
      name: account
      schema: {
          type: string,
          default: 4444333322221111
        }
      in: header
      required: false
      description: This field is required only if devicedata is absent. It must contain either a clear or encrypted payment account number (PAN) or an ACH routing and account number string in the format <routing>/<account> for eCheck transactions.
                    If encryptionhandler is provided, the account is treated as an encrypted PAN.
    DeviceDataParam:
      x-model-version: 1.0
      name: devicedata
      schema: {
          type: string
          }
      in: header
      description: This field is required only if account is absent.
    CVVParam:
      x-model-version: 1.0
      name: cvv
      schema: {
          type: number,
        }
      in: header
      description: Card Verification Value (CVV)
    ExpiryParam:
      x-model-version: 1.0
      name: expiry
      schema:
        {
          type: number,
        }
      in: header
      description: Expiration date
    SigParam:
      x-model-version: 1.0
      name: signature
      schema:
        {
          type: string,
        }
      in: header
      description: Signature data is the form of a Base64-encoded, Gzipped bitmap (BMP)
    EncryptHandleParam:
      x-model-version: 1.0
      name: encryptionhandler
      schema:
        {
          type: string,
        }
      in: header
      description: Encryption Handler. Either RSA, EX_APPLE_PAY, EX_GOOGLE_PAY
    UniqueParam:
      x-model-version: 1.0
      name: unique
      schema:
        {
          type: boolean,
        }
      in: header
      description: Specifies whether a unique token should be generated. Defaults to false.
    ErrorCode:
      x-model-version: 1.0
      name: errorcode
      schema:
        type: integer
      in: header
      description: An error code that displays signifying the importance of error codes.
    MessageParam:
      x-model-version: 1.0
      name: message
      schema:
        {
          type: string,
        }
      in: header
      description: A message to send in the ping request and receive in the response. The value can be blank, however the message field must be included in the request.
  schemas:
    receiptData:
      x-model-version: 1.0
      description: |
            An object that includes additional fields to be printed on a receipt.

            See <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuideForCloverTerminals.md&branch=develop#printing-receipts">Printing Receipts Using Authorization Data</a> in the <code>CardPointe Integrated Terminal Developer Guides</code> for detailed information. 
      properties:
        header:
          type: string
          example: header
          description: "A customizable field to display an alphanumeric message. For example, a specific terms, disclosure, or cardholder agreement statement."
        dba: {type: string, maxLength: 32, example: Business, description: The merchant's Doing Business As (DBA) name.}
        address1: {type: string, example: "1000 Continental Dr, King of Prussia, PA 19406", description: "Line 1 of the merchant's address."}
        address2: {type: string, description: "Line 2 of the merchant's address", example: }
        phone: {type: integer, description: "The merchant's phone number", example: "717-717-7171"}
        dateTime: {type: string, format: dateTime, description: "The date and time of the transaction (YYYYMMDDHHMMSS).", example: }
        nameOnCard: {type: string, description: "The Cardholder's name, if included in the authorization request.", example: }
        orderNote: {type: string, description: "A custom order note, if included in the userFields in the authorization request.", example: }
        items: {type: string, description: "A custom item descriptor, if included in the userFields in the authorization request.", example: }
        footer: 
          type: string
          example: footer 
          description: "A customizable field to display an alphanumeric message. For example, a specific terms, disclosure, or cardholder agreement statement."
    printReceiptSuccess:
      x-model-version: 1.0
      description: printReceipt Response
      properties:
        receiptData:
          {$ref: '#/components/schemas/receiptData'}
    printReceiptRequest:
      x-model-version: 1.0
      description: printReceipt Request
      properties:
        merchantId:
          description: |
            **Required Field**
            
            Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: |
            **Required Field**
            
            The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        orderId:
          description: |
            **Required Field**
            
            The order ID for the transaction for which to print a receipt.

            **Note**: If multiple transactions are found for the order ID, then the latest transaction with that order ID will be sent to the terminal for printing.
          maxLength: 50
          type: string
          example: 1233200399
        printDelay:
          description: |
            **Required** when <code>"printExtraReceipt":"true"</code>. The number of milliseconds to wait after printing the first receipt, before generating and printing the second receipt. On average, this process takes approximately 5 seconds (5000 ms); therefore, the total amount of time to print a second receipt is equal to the printDelay value + 5000ms.

            Valid values range from 0 to 60000.
          maxLength: 60000
          type: integer
          example: 2000
        printExtraReceipt: 
          description: |
            Optional. If true the terminal prints a second copy of the receipt. Use the printDelay parameter to specify the amount of time (in milliseconds) to wait between printing each receipt.
            Defaults to <code>false</code> if not specified.

            **Note**: If <code>true</code>, the <code>printDelay</code> parameter is also required in the request, to specify the delay (in milliseconds) between printing the first and second receipts.
          type: boolean
          example: 'true'
    tipSuccess:
      x-model-version: 1.0
      description: tip Response
      properties: 
        amount:
          description: | 
            The amount provided in the original request.
          type: integer
          example: 100
        tip:
          description: The calculated tip amount based on the user's selection or input.
          type: integer
          example: .06
        total:
          description: The calculated total transaction amount (amount + tip).
          type: integer
          example: 1.06
    tipRequest:
      x-model-version: 1.0
      description: tip Request
      properties: 
        merchantId:
          description: |
            **Required Field**
            
            Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: |
            **Required Field**
            
            The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        amount:
          maxLength: 14
          description: | 
            **Required Field**
            
            The dollar amount to be authorized, with two implied decimal places (for example, to specify "$10.00," enter "1000"). 
          type: integer
          example: 100
        prompt:
          description: |
            **Required Field**
            
            The text to send to the terminal display to prompt for confirmation. 
            
            To include a percent sign (%) in the prompt text, you must include two percent signs (%%) in the request. If you include a single percent sign, the terminal will display an unexpected message string.
          type: string
          example: phone number
          maxLength: 1000
        includeAmountDisplay:
          description: |
            Determines if the transaction amount is displayed to the user during an MSR or EMV (card-present) transaction.

            Defaults to true if not provided.
          type: boolean
          example: 'true'
        includeCustomTipAmount:
          description: |
            Determines if a custom tip button is displayed on the terminal. If <code>false</code>, tipPercentPresets is required to provide a range of preset tip percentage values.

            Defaults to <code>true</code> if not provided.
          type: boolean
          example: 'true'
        tipPercentPresets: 
          type: array
          items:
            type: integer
          example: [10, 12, 20]
          description: 'An array of three preset tip percentages, in the format [n, n, n]. **Required** if <code>"includeCustomTipAmount:"false"</code>. **Note**: The ability to set four preset values is planned for a future enhancement.'
    authManualSuccess:
      x-model-version: 1.0
      description: authCard Response
      properties:
        token:
          type: integer
          description: The token generated for the payment card.
          example: 9445123546981111
        expiry:
          type: string
          description: The card's expiration date in the format MMYY.
          example: 0428
          maxLength: 4
        signature: 
          type: object
          description: base64-encoded, gzipped BMP of the signature image
          example: <base64-encoded, gzipped BMP>
        batchid:
          description: The identifier for the batch that the transaction was added to. 
          type: string
          maxLength: 16
          example: 100
        retref:
          description: The retrieval reference number userd to look up and manage the transaction.
          type: string
          maxLength: 16
          example: 173006146691
        avsresp:
          description: |
            Alpha-numeric AVS (zip code) verification response code.

            **Note**: <code>avsresp</code> is typically only returned for approved authorizations, however this field can be returned in the response for a declined authorization if this setting is enabled for the merchant account.
          type: string
          example: Y
        respproc:
          description: An abbreviation that represents the platform and the processor for the transaction.
          type: string
          example: RPCT
        amount: 
          maxLength: 2147483647
          example: 1.00
          type: string
          description: |
            The authorized amount. For most transactions, this is the same as the request amount.
  
            For prepaid or gift cards, if partial authorization is enabled for the merchant account, the amount returned is the amount remaining on the card.
  
            For declines, the amount returned is "0.00"
        resptext: 
          description: A text description of the authorization response.
          type: string
          example: Approval
        authcode:
          description: The Authorization Code from the card issuer.
          type: string
          example: 909443
        respcode:
          description: An alpha-numeric response code that represents the description of the response
          type: string
          example: 000
        merchid:
          description: |
            The merchant ID, copied from the authorization request.
          type: string
          maxLength: 16
          example: 1234
        cvvresp:
          example: M
          description: |
            Alpha-numeric CVV (card verification value) verification response code, if returned by the processor.

            One of the following values:

            * **M** - Valid CVV Match.
            * **N** - Invalid CVV.
            * **P** - CVV Not Processed.
            * **S** - Merchant indicated that the CVV is not present on the card.
            * **U** - Card issuer is not certified and/or has not provided Visa encryption keys.
            * **X** - No response.
            
            **Note**: <code>cvvresp</code> is typically only returned for approved authorizations, however this field can be returned in the response for a declined authorization if this setting is enabled for the merchant account.
        respstat:
          description: |
            Indicates the status of the authorization request. 

            One of the following values:
            * **A** - Approved
            * **B** - Retry
            * **C** - Declined
          example: A
          type: string
          maxLength: 1
        acctid:
          description: The account ID for the stored profile, created if <code>"createProfile":"true"</code> in the request.
          example: N/A
          type: string
        profileid:
          description: |
            The profile ID for the stored profile, created if <code>"createProfile":"true"</code> in the request.
          example: 123456
          type: string
        entrymode:
          example: Swipe(Non EMV)
          type: string
          description: |
            Only returned for merchants using the First Data North, First Data Rapid Connect, and Chase Paymentech Tampa processors.

            Possible Values:

            * Keyed
            * Moto
            * ECommerce
            * Recurring
            * Swipe(Non EMV)
            * DigitalWallet
            * EMVContact
            * Contactless
            * Fallback to Track
            * Fallback to Keyed
        bintype:
          example: Prepaid
          type: string
          description: |
            Possible Values:
            * Corp
            * FSA+Prepaid
            * GSA+Purchase
            * Prepaid
            * Prepaid+Corp
            * Prepaid+Purchase
            * Purchase
        receiptData:
          {$ref: '#/components/schemas/receiptData'}
    authManualRequest:
      x-model-version: 1.0
      description: authCard Request
      properties:
        merchantId:
          description: |
            **Required Field**
            
            Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: |
            **Required Field**
            
            The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        amount:
          description: | 
            **Required Field**
          
            The dollar amount to be authorized, with two implied decimal places (for example, to specify "$10.00," enter "1000"). 
          type: integer
          maxLength: 2147483647
          example: 100
        authCode:
          description: An authorization code returned by the issuer, when voice authorization is required to complete a transaction.
          type: string
          example: 100
        authMerchantId: 
          description: |
            This value is only used if you have multiple merchant IDs, and want to process the transaction using a different merchant ID that is not associated with this terminal. The <code>authMerchantId</code> and <code>merchantId</code> must belong to the same customer account.

            This setting must be enabled for your merchant account.

            Contact <a href="mailto:integrationdelivery@fiserv.com>integrationdelivery@fiserv.com</a> for additional information.
          type: string
          maxLength: 16
        bin: 
          description: | 
            Determines if the binInfo object is included in the authorization response. The binInfo data includes additional information about the payment card used in the authorization. See the CardPointe Gateway API's BIN endpoint description for more information.

            Defaults to false if not provided.
          type: boolean
          example: 'false'
        beep:
          description: |
            Determines if the terminal beeps to:

            * Prompt the user to swipe/dip the card.
            * Prompt the user to remove the card (EMV transactions).
            * Register key presses during PIN entry for debit transactions.

            If true, beep is enabled.

            Defaults to false if not provided.
          type: boolean
          example: 'true'
        capture: 
          description: |
            Determines whether or not to capture the amount for settlement within the authorization request.

            If set to <code>false</code>, the retref or authcode must be captured in a separate request in order for the merchant to receive funding for the transaction.

            Defaults to <code>true</code> if not provided.
          type: boolean
          example: 'true'
        clearDisplayDelay:
          description: | 
            Determines the number of milliseconds to wait, after the request completes, before clearing the authorization status from the terminal display and returning to the idle display.

            Set to 0 to disable clearing the display after an authCard request.
          type: integer
          example: 500
        createProfile:
          description: |
            Determines whether or not to create a stored profile using the payment data in the request. 

            If <code>true</code>, initiates a profile create request to the CardPointe Gateway API profile endpoint. 

            If <code>false</code>, no profile is created. Defaults to false if not provided.

            See the CardPointe Gateway API <code>profile endpoint description</code> for detailed information.
          type: boolean
        gzipSignature:
          description: | 
            Determines if the captured signature is compressed using Gzip.

            If true, the signature data returned is a JSON-escaped, Base64-encoded, Gzipped, bitmap (BMP) file.

            If false, the signature data returned is an uncompressed BMP in base64-encoded. 

            Defaults to true if not provided.
          type: boolean
          example: 'false'
        includeAmountDisplay:
          description: |
            Determines if the transaction amount is displayed to the user during an MSR or EMV (card-present) transaction.

            Defaults to true if not provided.
            
            **Note**: This parameter is not supported for Clover terminals. The Clover terminal displays the amount to the user regardless of this parameter.
          type: boolean
          example: 'true'
        includeAVS:
          description: |
            Determines if the user is prompted to enter the billing zip code for the card.

            If true, prompts the user to enter the zip code.

            Defaults to false if not provided.
          type: boolean
        includeCVV:
          description: |
            Determines if the user is prompted to enter the card verification value (CVV) for the card.

            If true, prompts the user to enter the CVV.

            Defaults to false if not provided.
          example: 'false'
          type: boolean
        includeSignature:
          description: |
            Determines if the terminal prompts for a signature for devices that support signature capture.

            Defaults to true if not provided.

            The format of the signature data returned depends on the following parameters.
          type: boolean
          example: 'false'
        invoiceId:
          description: A unique invoice ID, used for ClientLine reporting. This value is an alphanumeric string with a maximum of 12 characters.
          type: string
          maxLength: 12
          example: 123456789012
        orderId:
          description: |
            A unique order ID used to identify the transaction. This value is an alphanumeric string with a maximum of 50 characters. If no order ID is specified in the request, the terminal automatically generates a unique order ID in the format <HSN-timestamp> and amends it to the transaction record.

            You can use the order ID to get information on a transaction using the CardPointe Gateway API inquireByOrderid endpoint.

            Additionally, when an authorization attempt times out and the terminal service does not receive a response from the CardPointe Gateway, the terminal service uses the order ID to make an <code>inquireByOrderid</code> request to check the status of the transaction. If the transaction status cannot be determined, the terminal service makes three <code>voidByorderId</code> requests to void the transaction. Review the Handling Timeouts section in the <a href="../docs/?path=docs/APIs/CardPointeIntegratedTerminalAPI.md&branch=develop">CardPointe Integrated Terminal Developer Guides</a> for more information.

            **Note**: If you include an order ID it must meet the following requirements: 

            * The order ID must be a unique value. Using duplicate order IDs can lead to the wrong transaction being voided in the event of a timeout.
            
            * The order ID must not include any portion of a payment account number (PAN), and no portion of the order ID should be mistaken for a PAN. If the order ID passes the Luhn check performed by the CardPointe Gateway, the value will be masked in the database, and attempts to use the order ID in an inquire, void, or refund request will fail.
          maxLength: 50
          type: string
          example: 1233200399
        printDelay:
          description: |
            For Clover terminals, specifies the amount of time (in milliseconds) to wait before printing generating and printing a second receipt, when "printExtraReceipt":"true". On average, this process takes approximately 5 seconds (5000 ms), therefore the total amount of time to print a second receipt is equal to the printDelay value + 5000ms.

            Valid values range from 0 to 60000 (ms).

            **Notes**:

            * <code>printDelay</code> is required when <code>"printExtraReceipt":"true"</code>; otherwise, the response returns the following error:

            <code>{"errorCode":1,"errorMessage":"printDelay is a required parameter when printExtraReceipt=true"}</code>

            * If <code>printDelay</code> is set to a value outside of the allowed range, the response returns the following error:

            <code>{"errorCode":3,"errorMessage":"'printDelay' value must be between 0 and 60,000"}</code>
          type: integer
          maxLength: 60000
        printExtraReceipt:
          description: |
            For Clover terminals, if <code>true</code>, the terminal prints a second copy of the receipt once the authorization is complete and the initial receipt is printed. 

            **Notes**:

            * Only applicable if <code>printReceipt</code> is <code>true</code>.
            
            * If <code>true</code>, the <code>printDelay</code> parameter is also **required**.
            
            Defaults to <code>false</code> if not provided.
          type: boolean
          example: 'false'
        printReceipt:
          description: |
            For Clover terminals, specifies whether or not the terminal prints a receipt.

            Defaults to <code>false</code> if not provided.
          type: boolean
        signatureDimensions:
          description: | 
            Specifies the custom width and height of the signature image, in the format 'x,y'. The maximum value is 999,999.
          type: integer
          maxLength: 999999
          example: 320, 450
        signatureFormat:
          type: string
          description: |
            Specifies the signature file format. One of the following values:

            * BMP (this is the default if the value is omitted)
            
            * JPG
            
            * PNG
          example: png
        signatureImageType:
          description: |
            Specifies if the image has a 1-bit color depth (binary) or 24-bit color depth (RGB).

            This property defaults to binary (1-bit) for BMP and PNG files. JPG files will always be rgb (24-bit).

            Possible values are:

            * binary - 1-bit; the default for BMP and PNG files.
            * rgb - 24-bit; the default for JPG files, and optional for PNG files.
        termId:
          description: |
            The Terminal Device ID, if required for ClientLine reporting. 

            If specified, termId must be exactly 8 characters.
          maxLength: 8
          type: string
        userFields:
          type: object
          description: |
            Enables optional userFields to include additional data in the authorization request for future retrieval.

            The value of the userFields object is a series of name-value pairs that are meaningful to the merchant. 

            The userFields object is limited to 4000 bytes total.
          example: {"UDF1" : "12345678", 
                    "UDF2" : "Good info here"}
    authCardSuccess:
      x-model-version: 1.0
      description: authCard Response
      properties:
        token:
          type: integer
          description: The token generated for the payment card.
          example: 9445123546981111
        expiry:
          type: string
          description: The card's expiration date in the format MMYY.
          example: 0428
          maxLength: 4
        signature: 
          type: object
          description: base64-encoded, gzipped BMP of the signature image
          example: <base64-encoded, gzipped BMP>
        name:
          type: string
          description: |  
            The cardholder's name on the card.
  
            The name is not returned if the card or mobile wallet is read through NFC (contactless).
          example: John Smith
          maxLength: 32
        batchid:
          description: The identifier for the batch that the transaction was added to. 
          type: string
          maxLength: 16
          example: 100
        retref:
          description: The retrieval reference number userd to look up and manage the transaction.
          type: string
          maxLength: 16
          example: 173006146691
        avsresp:
          description: |
            Alpha-numeric AVS (zip code) verification response code.

            **Note**: <code>avsresp</code> is typically only returned for approved authorizations, however this field can be returned in the response for a declined authorization if this setting is enabled for the merchant account.
          type: string
          example: Y
        respproc:
          description: An abbreviation that represents the platform and the processor for the transaction.
          type: string
          example: RPCT
        amount: 
          example: 1.00
          maxLength: 2147483647
          type: string
          description: |
            The authorized amount. For most transactions, this is the same as the request amount.
  
            For prepaid or gift cards, if partial authorization is enabled for the merchant account, the amount returned is the amount remaining on the card.
  
            For declines, the amount returned is "0.00"
        resptext: 
          description: A text description of the authorization response.
          type: string
          example: Approval
        authcode:
          description: The Authorization Code from the card issuer.
          type: string
          example: 909443
        respcode:
          description: An alpha-numeric response code that represents the description of the response
          type: string
          example: 000
        merchid:
          description: |
            Your merchant ID, copied from the request
          type: string
          maxLength: 16
          example: 1234
        cvvresp:
          example: M
          description: |
            Alpha-numeric CVV (card verification value) verification response code, if returned by the processor.

            One of the following values:

            * **M** - Valid CVV Match.
            * **N** - Invalid CVV.
            * **P** - CVV Not Processed.
            * **S** - Merchant indicated that the CVV is not present on the card.
            * **U** - Card issuer is not certified and/or has not provided Visa encryption keys.
            * **X** - No response.
            
            **Note**: <code>cvvresp</code> is typically only returned for approved authorizations, however this field can be returned in the response for a declined authorization if this setting is enabled for the merchant account.
        respstat:
          description: |
            Indicates the status of the authorization request. 

            One of the following values:
            * **A** - Approved
            * **B** - Retry
            * **C** - Declined
          example: A
          type: string
          maxLength: 1
        emvTagData:
          description: |
            A string of receipt and EMV tag data (when applicable) returned from the processor.

            **Note**: This string is returned for both EMV and non-EMV transactions on the First Data Rapid Connect (RPCT) front end platform.

            This data returned should be presented on a receipt if applicable, and recorded with the transaction details for future reference.

            See <a href=""../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#accepting-pin-debit-cards"">Printing Receipts Using Authorization Data</a> in the <a href="../docs/?path=docs/APIs/CardPointeIntegratedTerminalAPI.md&branch=develop">CardPointe Integrated Terminal Developer Guides</a> for detailed information. 
          type: string 
          example: N/A
        tokenExpired:
          description: |
            Returned for contactless (NFC) payments. 
            
            <code>"tokenexpired":"true"</code> indicates that an NFC payment method was used, and that the token generated is valid only for this authorization. 
          example: 'true'
          type: boolean
        acctid:
          description: The account ID for the stored profile, created if <code>"createProfile":"true"</code> in the request.
          example: N/A
          type: string
        profileid:
          description: |
            The profile ID for the stored profile, created if <code>"createProfile":"true"</code> in the request.
          example: 123456
          type: string
        entrymode:
          example: Swipe(Non EMV)
          type: string
          description: |
            Only returned for merchants using the First Data North, First Data Rapid Connect, and Chase Paymentech Tampa processors.

            Possible Values:

            * Keyed
            * Moto
            * ECommerce
            * Recurring
            * Swipe(Non EMV)
            * DigitalWallet
            * EMVContact
            * Contactless
            * Fallback to Track
            * Fallback to Keyed
        bintype:
          example: Prepaid
          type: string
          description: |
            Possible Values:
            * Corp
            * FSA+Prepaid
            * GSA+Purchase
            * Prepaid
            * Prepaid+Corp
            * Prepaid+Purchase
            * Purchase
        orderId:
          example: 1233200399
          description: |
            The unique order ID for this transaction. Returns the orderId specified in the request, otherwise returns the <code>orderId</code> generated by the terminal, in the format <code><HSN-timestamp></code>.
          type: string
        receiptData:
          {$ref: '#/components/schemas/receiptData'}
    authCardRequest:
      x-model-version: 1.0
      description: authCard Request
      properties:
        merchantId:
          description: |
            **Required Field**
            
            Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: |
            **Required Field**
            
            The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        amount:
          maxLength: 2147483647
          description: | 
            **Required Field**
          
            The dollar amount to be authorized, with two implied decimal places (for example, to specify "$10.00," enter "1000"). 
          type: integer
          example: 100
        aid:
          description: |
            Sets the default EMV application ID, which processes the request as either a PIN debit or a credit transaction.

            See <a href="https://qa-developerstudio.fiserv.com/product/CardPointe/docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#accepting-pin-debit-cards">Accepting PIN Debit Cards</a> for detailed information on PIN Debit requirements and application workflows.

            **Note**: PIN debit is only supported for qualified merchants boarded on the First Data North and Rapid Connect processing platforms. 

            Supported values are:

            * <code>debit</code> - Set to <code>debit</code> for EMV cards with a debit AID to request a PIN.
            * <code>credit</code> - Set to <code>credit</code> for all other cards. This is the default if no AID is specified.
          type: string
          example: credit
          maxLength: 8
        authCode:
          description: An authorization code returned by the issuer, when voice authorization is required to complete a transaction.
          type: string
          example: 100
        authMerchantId: 
          description: |
            This value is only used if you have multiple merchant IDs, and want to process the transaction using a different merchant ID that is not associated with this terminal. The <code>authMerchantId</code> and <code>merchantId</code> must belong to the same customer account.

            This setting must be enabled for your merchant account.

            Contact <a href="mailto:integrationdelivery@fiserv.com>integrationdelivery@fiserv.com</a> for additional information.
          type: string
          maxLength: 16
        bin: 
          description: | 
            Determines if the binInfo object is included in the authorization response. The binInfo data includes additional information about the payment card used in the authorization. See the CardPointe Gateway API's BIN endpoint description for more information.

            Defaults to false if not provided.
          type: boolean
          example: 'false'
        beep:
          description: |
            Determines if the terminal beeps to:

            * Prompt the user to swipe/dip the card.
            * Prompt the user to remove the card (EMV transactions).
            * Register key presses during PIN entry for debit transactions.

            If true, beep is enabled.

            Defaults to false if not provided.
          type: boolean
          example: 'true'
        capture: 
          description: |
            Determines whether or not to capture the amount for settlement within the authorization request.

            If set to <code>false</code>, the retref or authcode must be captured in a separate request in order for the merchant to receive funding for the transaction.

            Defaults to <code>true</code> if not provided.
          type: boolean
          example: 'true'
        clearDisplayDelay:
          description: | 
            Determines the number of milliseconds to wait, after the request completes, before clearing the authorization status from the terminal display and returning to the idle display.

            Set to 0 to disable clearing the display after an authCard request.
          type: integer
          example: 500
        confirmAmount:
          description: |
            Determines if the terminal prompts to confirm the the transaction amount prior to prompting to insert/swipe/tap the card.

            Defaults to true if not provided.
          type: boolean
          example: 'true'
        createProfile:
          description: |
            Determines whether or not to create a stored profile using the payment data in the request. 

            If <code>true</code>, initiates a profile create request to the CardPointe Gateway API profile endpoint. 

            If <code>false</code>, no profile is created. Defaults to false if not provided.

            See the CardPointe Gateway API <code>profile endpoint description</code> for detailed information.
          type: boolean
        gzipSignature:
          description: | 
            Determines if the captured signature is compressed using Gzip.

            If true, the signature data returned is a JSON-escaped, Base64-encoded, Gzipped, bitmap (BMP) file.

            If false, the signature data returned is an uncompressed BMP in base64-encoded. 

            Defaults to true if not provided.
          type: boolean
          example: 'false'
        includeAmountDisplay:
          description: |
            Determines if the transaction amount is displayed to the user during an MSR or EMV (card-present) transaction.

            Defaults to true if not provided.
            
            **Note**: This parameter is not supported for Clover terminals. The Clover terminal displays the amount to the user regardless of this parameter.
          type: boolean
          example: 'true'
        includeAVS:
          description: |
            Determines if the user is prompted to enter the billing zip code for the card.

            If true, prompts the user to enter the zip code.

            Defaults to false if not provided.
          type: boolean
        includePIN:
          description: |
            Determines if the user is prompted to enter a PIN after card swipe for MSR (magnetic-stripe) debit cards that support PIN.

            See <a href="https://qa-developerstudio.fiserv.com/product/CardPointe/docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#accepting-pin-debit-cards">Accepting PIN Debit Cards</a> for detailed information on PIN Debit requirements and application workflows.

            Note: PIN debit is only supported for qualified merchants boarded on the First Data North and Rapid Connect processing platforms. Contact Support for more information.

            Set this value to <code>true</code> for MSR debit cards, to process the transaction as debit.

            Defaults to <code>false</code> if not provided.
          type: boolean
          example: 'false'
        includeSignature:
          description: |
            Determines if the terminal prompts for a signature for devices that support signature capture.

            Defaults to true if not provided.

            The format of the signature data returned depends on the following parameters.
          type: boolean
          example: 'false'
        invoiceId:
          description: A unique invoice ID, used for ClientLine reporting. This value is an alphanumeric string with a maximum of 12 characters.
          type: string
          maxLength: 12
          example: 123456789012
        orderId:
          description: |
            A unique order ID used to identify the transaction. This value is an alphanumeric string with a maximum of 50 characters. If no order ID is specified in the request, the terminal automatically generates a unique order ID in the format <HSN-timestamp> and amends it to the transaction record.

            You can use the order ID to get information on a transaction using the CardPointe Gateway API inquireByOrderid endpoint.

            Additionally, when an authorization attempt times out and the terminal service does not receive a response from the CardPointe Gateway, the terminal service uses the order ID to make an <code>inquireByOrderid</code> request to check the status of the transaction. If the transaction status cannot be determined, the terminal service makes three <code>voidByorderId</code> requests to void the transaction. Review the Handling Timeouts section in the <a href="https://qa-developerstudio.fiserv.com/product/CardPointe/docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop">CardPointe Integrated Terminal Developer Guides</a> for more information.

            **Note**: If you include an order ID it must meet the following requirements: 

            * The order ID must be a unique value. Using duplicate order IDs can lead to the wrong transaction being voided in the event of a timeout.
            
            * The order ID must not include any portion of a payment account number (PAN), and no portion of the order ID should be mistaken for a PAN. If the order ID passes the Luhn check performed by the CardPointe Gateway, the value will be masked in the database, and attempts to use the order ID in an inquire, void, or refund request will fail.
          maxLength: 50
          type: string
          example: 1233200399
        printDelay:
          description: |
            For Clover terminals, specifies the amount of time (in milliseconds) to wait before printing generating and printing a second receipt, when "printExtraReceipt":"true". On average, this process takes approximately 5 seconds (5000 ms), therefore the total amount of time to print a second receipt is equal to the printDelay value + 5000ms.

            Valid values range from 0 to 60000 (ms).

            **Notes**:

            * <code>printDelay</code> is required when <code>"printExtraReceipt":"true"</code>; otherwise, the response returns the following error:

            <code>{"errorCode":1,"errorMessage":"printDelay is a required parameter when printExtraReceipt=true"}</code>

            * If <code>printDelay</code> is set to a value outside of the allowed range, the response returns the following error:

            <code>{"errorCode":3,"errorMessage":"'printDelay' value must be between 0 and 60,000"}</code>
          type: integer
          maxLength: 60000
        printExtraReceipt:
          description: |
            For Clover terminals, if <code>true</code>, the terminal prints a second copy of the receipt once the authorization is complete and the initial receipt is printed. 

            **Notes**:

            * Only applicable if <code>printReceipt</code> is <code>true</code>.
            
            * If <code>true</code>, the <code>printDelay</code> parameter is also **required**.
            
            Defaults to <code>false</code> if not provided.
          type: boolean
          example: 'false'
        printReceipt:
          description: |
            For Clover terminals, specifies whether or not the terminal prints a receipt.

            Defaults to <code>false</code> if not provided.
          type: boolean
        signatureDimensions:
          description: | 
            Specifies the custom width and height of the signature image, in the format 'x,y'. The maximum value is 999,999.
          type: integer
          maxLength: 999999
          example: 320, 450
        signatureFormat:
          type: string
          description: |
            Specifies the signature file format. One of the following values:

            * BMP (this is the default if the value is omitted)
            
            * JPG
            
            * PNG
          example: png
        signatureImageType:
          description: |
            Specifies if the image has a 1-bit color depth (binary) or 24-bit color depth (RGB).

            This property defaults to binary (1-bit) for BMP and PNG files. JPG files will always be rgb (24-bit).

            Possible values are:

            * binary - 1-bit; the default for BMP and PNG files.
            * rgb - 24-bit; the default for JPG files, and optional for PNG files.
        termId:
          description: |
            The Terminal Device ID, if required for ClientLine reporting. 

            If specified, termId must be exactly 8 characters.
          maxLength: 8
          type: string
        userFields:
          type: object
          description: |
            Enables optional userFields to include additional data in the authorization request for future retrieval.

            The value of the userFields object is a series of name-value pairs that are meaningful to the merchant. 

            The userFields object is limited to 4000 bytes total.
          example: {"UDF1" : "12345678", 
                    "UDF2" : "Good info here"}
    readManualRequest:
      x-model-version: 1.0
      description: readSignature Request
      properties:
        merchantId:
          description: |
            **Required Field**
            
            Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: |
           **Required Field**
            
            The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        amount:
          maxLength: 2147483647
          description: | 
            The dollar amount to be authorized, with two implied decimal places (for example, to specify "$10.00," enter "1000"). 
          type: integer
          example: 100
        includeSignature:
          description: |
            Determines if the terminal prompts for a signature for devices that support signature capture.

            Defaults to true if not provided.

            The format of the signature data returned depends on the following parameters.
          type: boolean
          example: 'false'
        signatureFormat:
          type: string
          description: |
            Specifies the signature file format. One of the following values:

            * BMP (this is the default if the value is omitted)
            
            * JPG
            
            * PNG
          example: png
        gzipSignature:
          description: | 
            Determines if the captured signature is compressed using Gzip.

            If true, the signature data returned is a JSON-escaped, Base64-encoded, Gzipped, bitmap (BMP) file.

            If false, the signature data returned is an uncompressed BMP in base64-encoded. 

            Defaults to true if not provided.
          type: boolean
          example: 'false'
        signatureDimensions:
          description: | 
            Specifies the custom width and height of the signature image, in the format 'x,y'. The maximum value is 999,999.
          type: integer
          maxLength: 999999
          example: 320, 450
        signatureImageType:
          description: |
            Specifies if the image has a 1-bit color depth (binary) or 24-bit color depth (RGB).

            This property defaults to binary (1-bit) for BMP and PNG files. JPG files will always be rgb (24-bit).

            Possible values are:

            * binary - 1-bit; the default for BMP and PNG files.
            * rgb - 24-bit; the default for JPG files, and optional for PNG files.
          type: string
          example: rgb
        includeExpirationDate:
          description: |
            Determines if the terminal prompts the user to enter the expiration date for the card.

            Defaults to true if not provided
          type: boolean
          example: "true"
        beep:
          description: |
            Determines if the terminal beeps to:

            * Prompt the user to swipe/dip the card.
            * Prompt the user to remove the card (EMV transactions).
            * Register key presses during PIN entry for debit transactions.

            If true, beep is enabled.

            Defaults to false if not provided.
          type: boolean
          example: 'true'
    readManualSuccess:
      x-model-version: 1.0
      description: readSignature Request
      properties:
        token:
          type: integer
          description: The tokenized card data returned by CardSecure.
          example: 9445123546981111
        expiry:
          type: string
          description: The card's expiration date in the format MMYY.
          example: 0428
          maxLength: 4
        signature:
          type: object
          description: base64-encoded, gzipped BMP of the signature image
          example: <base64-encoded, gzipped BMP>
    readCardRequest:
      x-model-version: 1.0
      description: readSignature Request
      properties:
        merchantId:
          description: |
            Required Field
            
            Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: |
            Required Field
            
            The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        amount:
          maxLength: 2147483647
          description: | 
            Required Field 
            
            The dollar amount to be authorized, with two implied decimal places (for example, to specify "$10.00," enter "1000"). 
          type: integer
          example: 100
        includeAmountDisplay:
          description: |
            Determines if the transaction amount is displayed to the user during an MSR or EMV (card-present) transaction.

            Defaults to true if not provided.
          type: boolean
          example: 'true'
        confirmAmount:
          description: |
            Determines if the terminal prompts to confirm the the transaction amount prior to prompting to insert/swipe/tap the card.

            Defaults to true if not provided.
          type: boolean
          example: 'true'
        includeSignature:
          description: |
            Determines if the terminal prompts for a signature for devices that support signature capture.

            Defaults to true if not provided.

            The format of the signature data returned depends on the following parameters.
          type: boolean
          example: 'false'
        signatureFormat:
          type: string
          description: |
            Specifies the signature file format. One of the following values:

            * BMP (this is the default if the value is omitted)
            
            * JPG
            
            * PNG
          example: png
        gzipSignature:
          description: | 
            Determines if the captured signature is compressed using Gzip.

            If true, the signature data returned is a JSON-escaped, Base64-encoded, Gzipped, bitmap (BMP) file.

            If false, the signature data returned is an uncompressed BMP in base64-encoded. 

            Defaults to true if not provided.
          type: boolean
          example: 'false'
        signatureDimensions:
          description: | 
            Specifies the custom width and height of the signature image, in the format 'x,y'. The maximum value is 999,999.
          type: integer
          maxLength: 999999
          example: 320, 450
        signatureImageType:
          description: |
            Specifies if the image has a 1-bit color depth (binary) or 24-bit color depth (RGB).

            This property defaults to binary (1-bit) for BMP and PNG files. JPG files will always be rgb (24-bit).

            Possible values are:

            * binary - 1-bit; the default for BMP and PNG files.
            * rgb - 24-bit; the default for JPG files, and optional for PNG files.
          type: string
          example: rgb
        beep:
          description: |
            Determines if the terminal beeps to:

            * Prompt the user to swipe/dip the card.
            * Prompt the user to remove the card (EMV transactions).
            * Register key presses during PIN entry for debit transactions.

            If true, beep is enabled.

            Defaults to false if not provided.
          type: boolean
          example: 'true'
        aid:
          description: |
            Sets the default EMV application ID, which processes the request as either a PIN debit or a credit transaction.

            See <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#accepting-pin-debit-cards">Accepting PIN Debit Cards</a> for detailed information on PIN Debit requirements and application workflows.

            **Note**: PIN debit is only supported for qualified merchants boarded on the First Data North and Rapid Connect processing platforms. 

            Supported values are:

            * <code>debit</code> - Set to <code>debit</code> for EMV cards with a debit AID to request a PIN.
            * <code>credit</code> - Set to <code>credit</code> for all other cards. This is the default if no AID is specified.
          type: string
          example: credit
          maxLength: 8
        includePIN: 
          description: |
            Determines if the user is prompted to enter a PIN after card swipe for MSR (magnetic-stripe) debit cards that support PIN.

            See <a href="../docs/?path=docs/documentation/CardPointeIntegratedTerminalDeveloperGuides.md&branch=develop#accepting-pin-debit-cards">Accepting PIN Debit Cards</a> for detailed information on PIN Debit requirements and application workflows.

            Note: PIN debit is only supported for qualified merchants boarded on the First Data North and Rapid Connect processing platforms. Contact Support for more information.

            Set this value to <code>true</code> for MSR debit cards, to process the transaction as debit.

            Defaults to <code>false</code> if not provided.
          type: boolean
          example: 'false'
    readCardSuccess:
      x-model-version: 1.0
      description: readSignature Request
      properties:
        token:
          type: integer
          description: The tokenized card data returned by CardSecure.
          example: 9445123546981111
        expiry:
          type: string
          description: The card's expiration date in the format MMYY.
          example: 0428
          maxLength: 4
        name:
          type: string
          description: |  
            The cardholder's name on the card.

            The name is not returned if the card or mobile wallet is read through NFC (contactless).
          example: Dylan Wolf
          maxLength: 32
        singleUseToken:
          description: |
            Specifies if the token is only valid for a single use. 

            Set to true if the card or mobile wallet is read through NFC (contactless).
          type: boolean
          example: 'false'
        signature:
          type: object
          description: base64-encoded, gzipped BMP of the signature image
          example: <base64-encoded, gzipped BMP>
    readSignatureRequest:
      x-model-version: 1.0
      description: readSignature Request
      properties:
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        prompt:
          description: |
            The text to send to the terminal display to prompt for confirmation. 
            
            To include a percent sign (%) in the prompt text, you must include two percent signs (%%) in the request. If you include a single percent sign, the terminal will display an unexpected message string.
          type: string
          example: phone number
          maxLength: 1000
        signatureFormat:
          type: string
          description: |
            Specifies the signature file format. One of the following values:

            * BMP (this is the default if the value is omitted)
            
            * JPG
            
            * PNG
          example: png
        gzipSignature:
          description: | 
            Determines if the captured signature is compressed using Gzip.

            If true, the signature data returned is a JSON-escaped, Base64-encoded, Gzipped, bitmap (BMP) file.

            If false, the signature data returned is an uncompressed BMP in base64-encoded. 

            Defaults to true if not provided.
          type: boolean
          example: 'false'
        signatureDimensions:
          description: | 
            Specifies the custom width and height of the signature image, in the format 'x,y'. The maximum value is 999,999.
          type: integer
          maxLength: 999999
          example: 320, 450
        signatureImageType:
          description: |
            Specifies if the image has a 1-bit color depth (binary) or 24-bit color depth (RGB).

            This property defaults to binary (1-bit) for BMP and PNG files. JPG files will always be rgb (24-bit).

            Possible values are:

            * binary - 1-bit; the default for BMP and PNG files.
            * rgb - 24-bit; the default for JPG files, and optional for PNG files.
          type: string
          example: rgb
    readSignatureSuccess:
      x-model-version: 1.0
      description: Successful readSignatureResponse
      properties:
        signature:
          type: object
          description: base64-encoded, gzipped BMP of the signature image
          example: <base64-encoded, gzipped BMP>
    displayRequest:
      x-model-version: 1.0
      description: display
      properties:
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        text:
          type: string
          description: The text to send to the terminal display. The terminal display is limited to 1000 characters.
            
            To create a line break to display a multi-line message, include \n.
            
            If this field is blank, the terminal display is cleared. 
    clearDisplayRequest:
      x-model-version: 1.0
      description: connect
      properties:
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
    connectRequest: 
      x-model-version: 1.0
      description: connect
      properties:
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        token:
          type: integer
          description: If two-factor authentication is enabled, you must include the token returned by the **preconnect** endpoint.

            This token is displayed on the terminal.
          maxLength: 6
          example: 123456
        force:
          type: boolean
          description: If set to true, any existing sessions are destroyed and any in-flight operations on the terminal are cancelled.
            If blank, this parameter defaults to defaults to false.
          example: 'true'
    readInputSuccess:
      x-model-version: 1.0
      properties:
        input:
          description: Returns the input provided at the terminal. The type and format of the input value depends on the getInput format specified in the request.
          example: "1-234-567-8901"
    readInputRequest:
      x-model-version: 1.0
      description: readInput Request
      properties:
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        prompt:
          description: |
            The text to send to the terminal display to prompt for confirmation. 
            
            To include a percent sign (%) in the prompt text, you must include two percent signs (%%) in the request. If you include a single percent sign, the terminal will display an unexpected message string.
          type: string
          example: phone number
          maxLength: 1000
        format:
          description: | 
            The readInput request reads data from the terminal keypad in the specified format.

            The format must be a valid getInput format. For more information on this formating, refer to <code>getInputformat</code>.
          type: string
          example: PHONE
          
        beep:
          description: | 
            Specifies whether the terminal beeps until the prompt is accepted.
            
            If true, beep is enabled. If blank, the value defaults to false.
          type: boolean
          example: 'true'
    readConfirmationRequest:
      x-model-version: 1.0
      description: Successful readConfirmation Response Parameters
      properties:
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        prompt:
          description: |
            The text to send to the terminal display to prompt for confirmation. 
            To include a percent sign (%) in the prompt text, you must include two percent signs (%%) in the request. If you include a single percent sign, the terminal will display an unexpected message string.
          type: string
          example: Please confirm
          maxLength: 1000
        beep:
          description: | 
            Specifies whether the terminal beeps until the prompt is accepted.
            
            If true, beep is enabled. If blank, the value defaults to false.
          type: boolean
          example: 'true'
    readConfirmationSuccess:
      x-model-version: 1.0
      description: Successful readConfirmation Response Parameters
      properties:
        confirmed:
          type: boolean
          description: Returns true if the prompt was accepted at the terminal, or false if the prompt was canceled.
          example: 'true'
    connectSuccess:
      x-model-version: 1.0
      description: Successful connect Response Parameters
      properties:
        X-CardConnect-SessionKey:
          type: integer
          description: The session key for the established connection
          example: âe3072040eb08454dac18ff67cd6c311c;expires=2018-08-22T23:49:55.684Z
    ping:
      x-model-version: 1.0
      description: ping
      properties: 
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
    pingSuccess:
      x-model-version: 1.0
      description: Returns connected if connected
      properties:
        connected:
          description: Returns true if the terminal is connected to the terminal service, or false if the terminal is not connected.
          example: connected
    getPanPadVersionSuccess:
      x-model-version: 1.0
      description: Pan Pad Version
      properties: 
        version: 
          description: Device version number
          example: 1060011
    listTerminalsSuccess:
      x-model-version: 1.0
      description: List of terminals
      type: object
      properties:
        terminals: {
          description: "An array of Hardware Serial Numbers (HSNs) for each terminal for the specified merchant ID.",
          example:  
             [ 
               "12145SC70108037", 
               "14012PP20131409", 
               "12155SC70113974",
               "12150SC70110741"
             ] 
        }
    terminalDetailsSuccess:
      x-model-version: 1.0
      description: List of terminal information
      properties:
        terminals: {
          description: "An array of Hardware Serial Numbers (HSNs) for each terminal for the specified merchant ID.",
          type: object,
          example:
          [  
          {
            "hsn": "C042UQ93160289",
            "name": "",
            "merchantId": "1234",
            "connected": true,
            "deviceType": "Mini 2",
            "environment": "UAT",
            "deviceCapabilities": {
                "screenDimensionX": 1280,
                "screenDimensionY": 800,
                "pinPad": true,
                "msr": true,
                "emv": true,
                "nfc": true,
                "signature": true,
                "printer": true
                }
            },
          { 
             "hsn":"15225SC90709732",
             "name":"",
             "merchantId":"1234",
             "connected":true,
             "deviceType":"iSC250 Touch",
             "environment":"UAT",
             "deviceCapabilities":
               { 
                "screenDimensionX":480,
                "screenDimensionY":272,
                "pinPad":true,
                "msr":true,
                "emv":true,
                "nfc":true,
                "signature":true,
                "printer":false
               }
          }
                 ] 
                
        }
    NotFoundError:
      x-model-version: 1.0
      description: Error information
      properties:
        message: {
          description: 'Information specific to a propery or attribute.',
          type: string,
          example: Data not found
        }
    BadRequestError:
      x-model-version: 1.0
      description: Error information
      properties:
        message: {
          description: 'Information specific to a propery or attribute.',
          type: string,
          example: Keystore invalid processor
        }
    ErrorCode: 
      description: An error code. Returns "00" if successful. All error codes contain four digits. Two zeros precede the codes.
      properties:
        code:
          description: An error code that shows the importance of error codes.
          type: integer
    Error:
      x-model-version: 1.0
      description: Error information
      properties:
        type:
          description: 'The type of response either from the HOST, GATEWAY, NETWORK, or APIM.'
          type: string
        code: {
          description: 'Error response code from the host, gateway, or network',
          type: string
        }
        message: {
          description: 'Information specific to a propery or attribute.',
          type: string
        }
    preconnectRequest:
      x-model-version: 1.0
      properties:
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
    disconnectRequest:
      x-model-version: 1.0 
      properties:
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn: 
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
    preconnectSuccess:
      x-model-version: 1.0
      properties:
        token:
          type: integer
          description: The 6-digit token to pass to the **connect** endpoint when two-factor authentication is enabled. This token is displayed on the terminal.
          maxLength: 6
          example: 123456
    Success200:
      x-model-version: 1.0
      description: Success
      example: 'OK'
    dateTimeRequest:
      x-model-version: 1.0
      type: object
      properties:
        dateTime:
          description: |+
            The dateTime value must be formatted as an ISO-8601 local date time (no timezone offset).
            Hyphens (-) for dates and colons (:) for times are required.
          type: string
          maxLength: 20
          example: 2021-02-03T11:30:45
        hsn:
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
    getPanPadVersionRequest:
      x-model-version: 1.0
      type: object
      properties:
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
        hsn:
          description: The hardware service number for the terminal.
          type: string
          maxLength: 18
          example: 14012PP20131409
    listTerminalsRequest:
      x-model-version: 1.0
      type: object
      properties:
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
    terminalDetailsRequest:
      x-model-version: 1.0
      type: object
      properties:
        merchantId:
          description: Your Merchant ID, required for all requests.
          type: string
          maxLength: 16
          example: 1234
  responses:
    listTerminalsResponse:
      x-model-version: 1.0
      description: Contains list of terminals associated with MID.
      content:
        terminals:
          example: { 
             [ 
               "12145SC70108037", 
               "14012PP20131409", 
               "12155SC70113974",
               "12150SC70110741" 
             ] 
            }
    terminalDetailsResponse:
      x-model-version: 1.0
      description: Contains list of terminals associated with MID.
      content:
        terminals:
          example: { 
             [  {
        "hsn": "C042UQ93160289",
        "name": "",
        "merchantId": "1234",
        "connected": true,
        "deviceType": "Mini 2",
        "environment": "UAT",
        "deviceCapabilities": {
            "screenDimensionX": 1280,
            "screenDimensionY": 800,
            "pinPad": true,
            "msr": true,
            "emv": true,
            "nfc": true,
            "signature": true,
            "printer": true
            }
        },
      { 
         "hsn":"15225SC90709732",
         "name":"",
         "merchantId":"1234",
         "connected":true,
         "deviceType":"iSC250 Touch",
         "environment":"UAT",
         "deviceCapabilities":
           { 
            "screenDimensionX":480,
            "screenDimensionY":272,
            "pinPad":true,
            "msr":true,
            "emv":true,
            "nfc":true,
            "signature":true,
            "printer":false
           }
      }
             ] 
            }
    dateTimeSuccess:
      x-model-version: 1.0
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success200'
    WrongVersion:
      x-model-version: 1.0
      description: Wrong version number
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidAction:
      x-model-version: 1.0
      description: Invalid action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DataNotDecimal:
      x-model-version: 1.0
      description: Data is not decimal digits
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    KeyIDNotFound:
      x-model-version: 1.0
      description: Key ID is not found
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    DataTooLong:
      x-model-version: 1.0
      description: Data is too long
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DataEmpty:
      x-model-version: 1.0
      description: Data is empty
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    UnknownAlgo:
      x-model-version: 1.0
      description: Unknown Algorithm
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    EncryptionFailure:
      x-model-version: 1.0
      description: Encryption Failure
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    Base64Failure:
      x-model-version: 1.0
      description: Base 64 decode failure
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    CryptoWrongLength:
      x-model-version: 1.0
      description: Crypto data is the wrong length
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    DataTooShort:
      x-model-version: 1.0
      description: Data is too short
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    CCNWrongLength:
      x-model-version: 1.0
      description: CCN wrong length on decryption
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    DecryptionFailure:
      x-model-version: 1.0
      description: Decryption Failure
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    BadPadding:
      x-model-version: 1.0
      description: Bad PKCS 5 padding
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    BadDecrypt:
      description: Bad decryption length field
    KeystoreNotInit:
      description: Keystore not initialized
    ApplicationNotInit:
      x-model-version: 1.0
      description: Application not initialized
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    BufferTooShort:
      x-model-version: 1.0
      description: Buffer too short
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    IllegalCharacter:
      x-model-version: 1.0
      description: Illegal characters
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    WrongLength:
      x-model-version: 1.0
      description: Wrong message length
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    ServerFailed:
      x-model-version: 1.0
      description: Server failed
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    ConfigItemBad:
      x-model-version: 1.0
      description: Config item is bad
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    TokenDataProb:
      x-model-version: 1.0
      description: Token database problem
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    UnAuthHost:
      x-model-version: 1.0
      description: Unauthorized host
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    TokenPurged:
      x-model-version: 1.0
      description: Token Purged
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    DataNotFound:
      x-model-version: 1.0
      description: Data not found
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    ErrorHashing:
      x-model-version: 1.0
      description: Error hashing the value
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    TokenDuplicate:
      x-model-version: 1.0
      description: Token or data duplicate
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    LuhnFailure:
      x-model-version: 1.0
      description: Card number check (Luhn formula) failed
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    MissingSiteName:
      x-model-version: 1.0
      description: Missing or unknown site name
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    TokenFormatBad:
      x-model-version: 1.0
      description: Token format is bad
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    RequestSignatureInvalid:
      x-model-version: 1.0
      description: Request signature is bad
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    RequestSignatureExpired:
      x-model-version: 1.0
      description: Request signature timestamp expired
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    RequestSignatureMismatch:
      x-model-version: 1.0
      description: Request signature mismatch
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    RequestSignatureFailure:
      x-model-version: 1.0
      description: Request signature failure
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    PINTranslationFail:
      x-model-version: 1.0
      description: PIN translation fail
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    KeystoreImportFail:
      x-model-version: 1.0
      description: Keystore import failure
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    KeystoreUserstoreFail:
      x-model-version: 1.0
      description: Keystore userstore failure
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    KeystoreInvalidProc:
      x-model-version: 1.0
      description: Keystore invalid processor
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthTerminal:
      x-model-version: 1.0
      description: Unauthorized terminal
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    KeystoreRollbackFail:
      x-model-version: 1.0
      description: Keystore rollback failure
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthDecrypt:
      x-model-version: 1.0
      description: Unauthorized decrypt
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidEMVData:
      x-model-version: 1.0
      description: Invalid EMV tag data
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    EMVDataEmpty:
      x-model-version: 1.0
      description: EMV tag data empty
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    MissingReqParam:
      x-model-version: 1.0
      description: Missing required parameter
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidEllipticParam:
      x-model-version: 1.0
      description: Invalid elliptic curve type parameter
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    JSONSerializationError:
      x-model-version: 1.0
      description: JSON serialization error
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    JSONDeserializationError:
      x-model-version: 1.0
      description: JSON deserialization error
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidSwipeData:
      x-model-version: 1.0
      description: Invalid swipe data
      content:
        application/JSON:
          schema:
            $ref: '#/components/schemas/Error'
  examples:
    displaySingleLineRequestExample:
      value:
        merchantId: '1234'
        hsn: '14012PP20131409'
        text: 'Approved'
    displayLineBreakRequestExample:
      value:
        merchantId: '1234'
        hsn: '14012PP20131409'
        text: Try \n Again
    displayClearRequestExample:
      value:
        merchantId: '1234'
        hsn: '14012PP20131409'
        text: '' 
    Successful:
      value:
        errorcode: 0,
        data: "AAdoWZghKq4An1Pl0PJKDQfTQ"
        message: "No error"
    WrongVersion:
      value:
        type: 'integer'
        code: '003'
        message: 'Message'
    listTerminalsExample:
      value:
        merchantId: '1234'
    listTerminalsResponseExample:
      value:
        terminals: { 
           [ 
             "12145SC70108037", 
             "14012PP20131409", 
             "12155SC70113974",
             "12150SC70110741" 
           ] 
          }
    terminalDetailsExample:
      value:
        merchantId: 1234
    terminalDetailsResponseExample:
      value:
        terminals: { 
        [  
        {
        "hsn": "C042UQ93160289",
        "name": "",
        "merchantId": "1234",
        "connected": true,
        "deviceType": "Mini 2",
        "environment": "UAT",
        "deviceCapabilities": {
            "screenDimensionX": 1280,
            "screenDimensionY": 800,
            "pinPad": true,
            "msr": true,
            "emv": true,
            "nfc": true,
            "signature": true,
            "printer": true
            }
        },
      { 
         "hsn":"15225SC90709732",
         "name":"",
         "merchantId":"1234",
         "connected":true,
         "deviceType":"iSC250 Touch",
         "environment":"UAT",
         "deviceCapabilities":
           { 
            "screenDimensionX":480,
            "screenDimensionY":272,
            "pinPad":true,
            "msr":true,
            "emv":true,
            "nfc":true,
            "signature":true,
            "printer":false
           }
      }
             ] 
            }
