URL: https://secure.bluepay.com/interfaces/stq

Input/query to the script in standard https POST format, in the body.
Output/response uri-encoded name-value pairs in the body.

Last Updated: 2022-02-09

---------------------------
INPUT PARAMETERS
---------------------------

ACCOUNT_ID
	-- Required
	Merchant's 12-digit BluePay Account ID.

TAMPER_PROOF_SEAL
	-- Required
	Hash for security, using selected algorithm (either TPS_HASH_TYPE or account's 'Hash Type in 
  APIs' value). See TAMPER_PROOF_SEAL section below for more details.

REPORT_START_DATE 
REPORT_END_DATE 
	-- Required unless id or master_id are included in the input parameters used.
	Format dates as YYYY-MM-DD HH:MM:SS. Time defaults to 00:00:00 if not submitted.

EXCLUDE_ERRORS 
	-- Optional
	Set to 1 to ignore error transactions in search.

MODE 
	-- Optional
	Mode the transaction was processed as (LIVE or TEST). Defaults to LIVE.

f_captured / isnull_f_captured    
	-- Optional
	Set f_captured to 1 for captured transaction. 
	Set isnull_f_captured to 1 for uncaptured transaction.

LIMIT_ONE
	-- Optional
	Set to 1 to return results of a single transaction if the search criteria matches more than 
	one transaction.

TPS_HASH_TYPE
	-- Optional
  The algorithm used to compute the TAMPER_PROOF_SEAL. Accepted values are 'MD5', 'SHA256', 
  'SHA512', 'HMAC_SHA256', or 'HMAC_SHA512'. Merchant's 'Hash Type in APIs' value is used if 
  this parameter is not present. See TAMPER_PROOF_SEAL section below for more details.

TPS_DEF 
	-- Optional
	**  NOTICE: THE USE OF THIS FIELD CAN POSSIBLY WEAKEN YOUR SECURITY. PLEASE BE SURE YOU 
      UNDERSTAND HOW THE TAMPER_PROOF_SEAL WORKS BEFORE YOU CONSIDER USING THIS OPTION. **
  Space-separated list of input field names in the order they are to be used in the calculation 
  of the TAMPER_PROOF_SEAL. If set as blank or not sent, it will default to:
  "ACCOUNT_ID REPORT_START_DATE REPORT_END_DATE". The merchant's Secret Key is always used in 
  the calculation of the TAMPER_PROOF_SEAL, but should NOT be included in the TPS_DEF. See 
  TAMPER_PROOF_SEAL section below for more details.

-------------------------------------------------------------------
ADDITIONAL OPTIONAL INPUT PARAMETERS / STANDARD OUTPUT PARAMETERS
-------------------------------------------------------------------

acct_update_id

addr1

addr2

amount

auth_code

avs_result

backend_id

bank_name

bindata

card_country

card_expire

card_present

card_type             AMEX,MC,DISC,VISA,JCB,DCCB,ENRT,BNKC

city

company_name

country

custom_id

custom_id2

cust_token

cvv_result

email

f_captured

f_transarmor

f_void

id

invoice_id

issue_date

lodging_data

memo

merchdata

master_id

message

name1

name2

order_id

origin

payment_account Must use format xxxxxxxxxxxx1234 to input the last 4 digits for searching.

payment_type    CREDIT, ACH

phone

processor_id

rebilling_id

remote_ip

settle_date

settlement_id

state

status		1=Approved, 0=Declined, E=Error, #=In Process

trans_type      AUTH, SALE, CAPTURE, REFUND, REBCANCEL

vehicle_rental_data

zip

ach_noc_id			ACH Notice of Change (NOC) ID. A 12-digit number identifying which NOC was applied to the transaction. Null if no NOC was applied.
                    Banks provide a NOC if information used on a transaction should be changed on subsequent transactions.
                    BluePay saves NOC information and automatically applies it new transactions when the previously corrected information is used.

ach_trace_number    The unique 15-digit trace control number assigned to a transaction whenever it is added to the NACHA settlement file. It is required by the originators to identify the individual entries.
					It identifies the transaction during the transmission from BluePay to the orginating bank. The originating bank assigns a new trace number when they transmit the transaction to the Federal Reserve.
					The receiving bank will have the Federal Reserve trace number, not this number. BluePay Support can request the Federal Reserve trace number from the originating bank if needed.
                    The first eight digits represent the Processor Routing Number, and the remaining seven digits are sequentially numbered from "1" to "9999999" across multiple files on multiple days.  
                    The sequential number starts again at "1" once it reaches its maximum limit of "9999999."

validation_result   Status value that includes bank account validation results.
  
                    Possible status values are:
                    - '15': Known bad bank account. The transaction is immediately declined (validation fee charged for LIVE transactions)
                    - '20': Unknown bank account but with a valid format (validation fee charged for LIVE transactions))
                    - '25': Unknown bank account (validation fee charged for LIVE transactions))
                    - '35': Bank account found but pending transaction settlement (validation fee charged for LIVE transactions))
                    - '45': Known good bank account (validation fee charged for LIVE transactions)
                    - 'B': Account validation bypassed (no validation fee charged)
                    - 'R': Bank Account received known bad previously (no validation fee charged)
                    - 'E': Error, Bank account validation failed (no validation fee charged)
                    - null: Account validation not performed (no validation fee charged)

###############################
# TAMPER_PROOF_SEAL
###############################

BluePay uses cryptographic hash (or "digest") functions as a means of both protecting 
transaction data from being altered and ensuring that the transaction is genuine. A 
cryptographic hash function is an algorithm that maps data of any size to a bit string of a 
fixed size that cannot be deciphered. 

All merchants have a default hash type assigned to their account. This can be viewed and 
updated on the merchant's Account Admin page of BluePay's Gateway (https://secure.bluepay.com) 
under "Hash Type in APIs". Merchants may override their default by including the TPS_HASH_TYPE 
field in the transaction request. 

The default hash type and the TPS_HASH_TYPE may be any of the following algorithms (in 
hexadecimal form):

MD5           Use md5sum or a similar program to calculate a 128-bit hash, then convert it 
              into hexadecimal form; result is 32 hexadecimal characters.
SHA256        Use sha256sum or a similar program to calculate a 256-bit hash, then convert it 
              into hexadecimal form; result is 64 hexadecimal characters.
SHA512        Use sha512sum or a similar program to calculate a 512-bit hash, then convert it 
              into hexadecimal form; result is 128 hexadecimal characters.

HMAC_SHA256   A 128-bit hash, resulting in a sequence of 64 hexadecimal characters.
HMAC_SHA512   A 128-bit hash, resulting in a sequence of 128 hexadecimal characters.

Steps to find the HMAC of either SHA256 (HMAC_SHA256) or SHA512 (HMAC_SHA512):

1. Compare the length of the key (the merchant's Secret Key) to the hash's input blocksize.
   SHA256 blocksize = 64, SHA512 blocksize = 128.
   If length of key is > blocksize, set the key's value to the hash of the original key.
   If length of key is < blocksize, pad the key to the right with zeros until its length 
   equals the blocksize.

2. Create the inner key (inner_key):
   Create an inner padding value of 0x36 repeated the blocksize number of times.
   Perform a bitwise exclusive-OR (XOR) on the key and the inner padding to create the inner 
   key.

3. Create the outer key (outer_key):
   Create an outer padding value of 0x5c repeated the blocksize number of times.
   Perform a bitwise exclusive-OR (XOR) on the key and the outer padding to create the outer 
   key.

4. Calculate the hash of the inner key concatenated with the text string, then calculate the 
   hash of the outer key concatenated with the previous hash result:
   hash(outer_key + hash(inner_key + string))

5. Convert the result into a hex string.
 
When using a program or function to calculate the TAMPER_PROOF_SEAL, make sure that it will 
accept a text string (or "message") argument and will return the hashed string (or "message 
digest") in hexadecimal form. 


####################################
# Calculating the TAMPER_PROOF_SEAL
####################################

STEP ONE
Concatenate the values of the fields that make up the TPS_DEF in same order that they are 
listed. Use ""(empty string - no space) as the value for any fields that are empty or 
unsent. When no TPS_DEF is sent ('+' represents string concatenation, and the field names 
represent the contents of the respective fields):

message  = ACCOUNT_ID + REPORT_START_DATE + REPORT_END_DATE

STEP TWO
- If TPS_HASH_TYPE is "" or is not sent, the merchant's 'Hash Type in APIs' value will 
  determine which hash function to use.

- If TPS_HASH_TYPE is 'MD5', 'SHA256', or 'SHA512', find the md5sum, sha256sum, or sha512sum 
  of (the merchant's Secret Key + message) in hex format.

- If TPS_HASH_TYPE is 'HMAC_SHA256' or 'HMAC_SHA512', find the HMAC_SHA256 or HMAC_SHA512 of 
  (the merchant's Secret Key, message) in hex format.


EXAMPLE:
Merchant A's account information is as follows:
  Secret Key = "abcdabcdabcdabcd"
  ACCOUNT_ID = "123412341234"
  Hash Type in APIs (default hash type) = "MD5"

If Merchant A wanted to find a TEST transaction issued on 2018-02-28, the request might 
include:
  TPS_DEF = "ACCOUNT_ID EXCLUDE_ERRORS REPORT_START_DATE REPORT_END_DATE LIMIT_ONE"
  ACCOUNT_ID = "123412341234"
  LIMIT_ONE = "1"
  REPORT_START_DATE = "2018-02-28"
  REPORT_END_DATE = "2018-03-01"
  MODE = "TEST"

To calculate the TAMPER_PROOF_SEAL, Merchant A would need to:

STEP ONE
Concatenate the values in the TPS_DEF to create a message string. Remember, if the field isn't 
sent or if the value is undefined, use an empty string as that field's value.
message  = ACCOUNT_ID + EXCLUDE_ERRORS + REPORT_START_DATE + REPORT_END_DATE + LIMIT_ONE
         = "123412341234" + "" + "2018-02-28" + "2018-03-01" + "1"
         = "1234123412342018-02-282018-03-011"

STEP TWO
This step will vary depending on which TPS_HASH_TYPE is sent (if any).

-- If TPS_HASH_TYPE = "" or was not sent, the merchant's default hash type must be used
TAMPER_PROOF_SEAL = md5sum( Secret Key + message ) in hex format
                  = md5sum("abcdabcdabcdabcd" + "1234123412342018-02-282018-03-011") in hex 
                    format 
                  = "0d76fcbca9501abe9cc3985e03a62d7d"

-- If TPS_HASH_TYPE = "SHA256"
TAMPER_PROOF_SEAL = sha256sum( Secret Key + message ) in hex format
                  = sha256sum("abcdabcdabcdabcd" + "1234123412342018-02-282018-03-011") in hex 
                    format
                  = "c8981328bba52de2e931fe5b67bbfb76d92c16262ff04896ae62bf9d1d30e076"

-- If TPS_HASH_TYPE = "HMAC_SHA256"
TAMPER_PROOF_SEAL = HMAC_SHA256( Secret Key, message ) in hex format
                  = HMAC_SHA256("abcdabcdabcdabcd", "1234123412342018-02-282018-03-011") in hex 
                    format
                  = "08859f8e5fe469bb9dd93cb4da6334f7473d9f76a98d7056bd2e8e62c656ad5d"