{
	"info": {
		"_postman_id": "46f46766-06dd-46e1-ae30-d2148caebf10",
		"name": "CardPointe-Only Boarding",
		"description": "Merchants that process transactions through the CardPointe Gateway while still maintaining their relationship with their acquirer are known as CardPointe-Only accounts.\n\nBoarding for these accounts can be done automatically through CoPilot allowing for minimal manual interaction with the account.\n\nThis will allow eligible merchants to be boarded to the CardPointe Gateway via Straight Through boarding. Merchants who are not eligible for Straight Through boarding will remain in **Qualifying** status and must be manually reviewed by the Underwriting team. All new merchants created on sales codes where this partner is the primary will inherit this setting.\n\nTo use this method the **Allow CardPointe Gateway Straight through Boarding** setting in CoPilot must be enabled. This setting can be found under the **Application** tab in the **My Details** section of CoPilot.\n\nThis collection will be used to:\n\nNew Merchant:\n\n- Create a new North merchant\n    \n- Create a Bolt on Clover order\n    \n- Validate that merchant is approved on Diligence\n    \n- Validate that merchant is boarded on NMM\n    \n- Validate that merchant is boarded on FDPOS\n    \n- Validate that merchant is boarded on Gateway\n    \n- Validate the TMS order gets created\n    \n- Validate that the Clover ID gets created\n    \n- Mock FDHS shipping event\n    \n- Validate that the device has been created in TMS\n    \n- Validate that the device has been provision in TMS\n    \n- Validate that the order has been provisioned in Clover\n    \n- Validate device status in MEMS\n    \n- Validate the terminal status on TMS\n    \n\nExisting Merchant\n\n- Create a Bolt on Clover order\n    \n- Validate the TMS order gets created\n    \n- Mock FDHS shipping event\n    \n- Validate that the device has been created in TMS\n    \n- Validate that the device has been provision in TMS\n    \n- Validate that the order has been provisioned in Clover\n    \n- Validate device status in MEMS\n    \n- Activate the terminal through TMS\n    \n- Validate the terminal status on TMS\n    \n- Update the device HSN on MEMS so that it can be reused",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28492686"
	},
	"item": [
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"access-token\", data.access_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"name": "Content-Type",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "{{username}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "password",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "{{client-id}}",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "{{client-secret}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{token-url}}",
					"host": [
						"{{token-url}}"
					]
				},
				"description": "Use the **Token** endpoint to authenticate your account and recieve an access token necessary for all subsequent CoPilot API calls.\n\n**Note:** This request contains code within the **Tests** tab to automatically save the access token from the response as an environment variable.\n\nView the documentation for this method in the [Developer Center](https://developer.cardconnect.com/copilotapi#token)."
			},
			"response": []
		},
		{
			"name": "Create CardPointe Only Merchant",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Successful POST request.\", function() {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
							"});",
							"",
							"pm.test(\"Response has a merchantId property.\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"merchantId\");",
							"});",
							"",
							"pm.test(\"merchantId value is not null. (\" + pm.response.json().merchantId + \")\", function() {",
							"    pm.expect(pm.response.json().merchantId).to.not.equal(null);",
							"});",
							"",
							"pm.collectionVariables.set(\"merchantId\", jsonData.merchantId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"var randomFirstName;",
							"var randomLastName;",
							"var signerFullName;",
							"var backEndMid;",
							"",
							"function setFirstName() {",
							"\trandomFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
							"\treturn randomFirstName.replace(/[^a-zA-Z0-9 ]/g, '');;",
							"}",
							"",
							"function setLastName() {",
							"\trandomLastName = pm.variables.replaceIn('{{$randomLastName}}');",
							"\treturn randomLastName.replace(/[^a-zA-Z0-9 ]/g, '');;",
							"}",
							"",
							"function setFullName() {",
							"    signerFullName = (randomFirstName + \" \" + randomLastName);",
							"    return signerFullName;",
							"}",
							"",
							"function generateRandom12DigitNumber() {",
							"  let randomNumber = '';",
							"  for (let i = 0; i < 12; i++) {",
							"    randomNumber += Math.floor(Math.random() * 10);",
							"  }",
							"  return randomNumber;",
							"}",
							"",
							"pm.collectionVariables.set(\"ownerFirstName\", setFirstName());",
							"pm.collectionVariables.set(\"ownerLastName\", setLastName());",
							"pm.collectionVariables.set(\"fullName\", setFullName());",
							"pm.collectionVariables.set(\"templateId\", \"20607\");",
							"pm.collectionVariables.set(\"salesCode\", \"RED GWO 2\");",
							"pm.collectionVariables.set(\"randomMID\", generateRandom12DigitNumber());",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{employee_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-CopilotAPI-Version",
						"value": "1.0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"templateId\": \"{{templateId}}\",\n    \"merchant\": {\n        \"salesCode\": \"{{salesCode}}\",\n        \"akaBusinessName\": \"Red Wizard GWO\",\n        \"custPrimaryAcctFlg\": true,\n        \"dbaName\": \"Red Wizard GWO\",\n        \"legalBusinessName\": \"Legal Red Wizard GWO\",\n        \"taxFilingMethod\": \"EIN\",\n        \"taxFilingName\": \"Red Wizard GWO\",\n        \"demographic\": {\n            \"businessIncorporatedStateCd\": \"CO\",\n            \"merchantTimeZone\": \"MT\",\n            \"websiteAddress\": \"www.test.com\",\n            \"businessPhone\": \"302-876-9855\",\n            \"businessFax\": \"403-444-2344\",\n            \"businessAddress\": {\n                \"address1\": \"443 E Main st\",\n                \"address2\": \"Apt. 23\",\n                \"city\": \"Newark\",\n                \"countryCd\": \"US\",\n                \"stateCd\": \"DE\",\n                \"zip\": \"19702\"\n            },\n            \"mailingAddress\": {\n                \"address1\": \"123 Main St.\",\n                \"address2\": \"Suite 3001\",\n                \"city\": \"Newark\",\n                \"countryCd\": \"US\",\n                \"stateCd\": \"DE\",\n                \"zip\": \"19703\"\n            }\n        },\n        \"businessIdTypeCd\": \"ARTICLE\",\n        \"businessStartDate\": \"04/26/1962\",\n        \"bankDetail\": {\n            \"depositBank\": {\n                \"bankAcctNum\": \"12345678\",\n                \"bankRoutingNum\": \"102000021\",\n                \"bankAcctTypeCd\": \"BIZ\",\n                \"bankName\": \"Deposit Bank\"\n            },\n            \"withdrawalBank\": {\n                \"bankAcctNum\": \"87654321\",\n                \"bankRoutingNum\": \"102000021\",\n                \"bankAcctTypeCd\": \"SAVINGS\",\n                \"bankName\": \"Withdrawal Bank\"\n            }\n        },\n        \"ownership\": {\n            \"owner\": {\n                \"ownerAddress\": {\n                    \"address1\": \"123 Brookedge Rd\",\n                    \"address2\": \"Apt 121\",\n                    \"city\": \"Wilmington\",\n                    \"countryCd\": \"US\",\n                    \"stateCd\": \"DE\",\n                    \"zip\": \"19711\"\n                },\n                \"ownerEmail\": \"redwizardgwo4@redwizardgwo4.com\",\n                \"ownerName\": \"{{fullName}}\",\n                \"ownerDob\": \"09/22/1997\",\n                \"ownerPhone\": \"302-256-7849\",\n                \"ownerMobilePhone\": \"443-956-9565\",\n                \"ownerTitle\": \"CEO\",\n                \"ownerSSN\": \"232-33-4123\"\n            },\n            \"ownershipTypeCd\": \"PRIVCORP\",\n            \"driversLicenseNumber\": null,\n            \"driversLicenseStateCd\": null,\n            \"ownerOwnershipPct\": 30\n        },\n        \"merchantContactInfo\": {\n            \"contactName\": \"Red GWO\",\n            \"contactEmail\": \"redwizardgwo@redwizardgwo.com\",\n            \"contactPhone\": \"202-876-7657\"\n        },\n        \"processing\": {\n            \"platformDetails\": {\n\t\t\t\t\"backEndMid\": \"{{randomMID}}\",\n\t\t\t\t\"frontEndMid\": \"{{randomMID}}\",\n\t\t\t\t\"processorReportingMid\": \"{{randomMID}}\",\n                \"backEndPlatformCd\": \"FDNOB\",\n                \"frontEndPlatformCd\": \"FDNOF\",\n                \"amexProgramAssetCd\": \"OPTBLUE\",\n                \"amexProgramMid\": \"2341251235\",\n                \"discoverMid\": \"2134123423555\",\n                \"discoverProgramCd\": \"MAP\",\n                \"acquiringFlg\": false,\n                \"taxId\": \"485968574\",\n                \"tid\": \"968596859\",\n                \"busnsId\": \"234444234234\",\n                \"currencyCode\": \"USD\",\n                \"mccId\": \"5812\",\n                \"businessDescription\": \"Business Description\"\n            },\n            \"businessDetails\": {\n                \"customerBillPriorToShipFlg\": false,\n                \"depositReqForFulfillFlg\": true,\n                \"whenCustomerChargedCd\": \"INADVANCE\",\n                \"refundPolicyCd\": \"EXCHONLY\",\n                \"serviceProvidedInCd\": \"30LESS\"\n            },\n            \"volumeDetails\": {\n                \"averageMonthlyVolume\": 1000,\n                \"highTicketAmount\": 100,\n                \"averageTicketAmount\": 25\n            },\n            \"deliveryPercentages\": {\n                \"dlvry0To7DaysPct\": 100,\n                \"dlvry15To30DaysPct\": 0,\n                \"dlvry8To14DaysPct\": 0,\n                \"dlvryOver30DaysPct\": 0\n            },\n            \"modeOfTransaction\": {\n                \"eCommercePct\": 100,\n                \"keyedPct\": 0,\n                \"mailOrderPct\": 0,\n                \"swipedPct\": 0\n            }\n        },\n        \"webLeadFlg\": true,\n             \"icPlusPricing\": null\n        },\n        \"pricing\": {\n            \"flatPricing\": {\n                \"amex\": {\n                    \"esaQualDiscountPct\": 2,\n                    \"optBlueQualDiscountPct\": 6\n                },\n                \"discover\": {\n                    \"qualCreditDiscountPct\": 9\n                },\n                \"mastercard\": {\n                    \"qualCreditDiscountPct\": 12\n                },\n                \"visa\": {\n                    \"qualCreditDiscountPct\": 0.99\n                }\n            }\n        },\n        \"fees\": {\n            \"achBatchFee\": 1.11,\n            \"addressVerifFee\": 2.22,\n            \"annualMembershipFee\": 3.33,\n            \"appFee\": 4.44,\n            \"authFee\": 5.55,\n            \"chargebackFee\": 6.66,\n            \"dataBreachFee\": 7.77,\n            \"ddaRejectFee\": 8.88,\n            \"earlyCancelFee\": 9.99,\n            \"minProcessFee\": 20,\n            \"monthlyEquipmentRentalFee\": 10,\n            \"pciAnnualFee\": 21,\n            \"pciNonComplianceFee\": 100,\n            \"regProdMonthlyFee\": 200,\n            \"retrievalFee\": 10,\n            \"statementFee\": 27.99,\n            \"transactionFee\": 0.05,\n            \"voiceAuthFee\": 0.1,\n            \"wirelessActivationFee\": 0.1,\n            \"wirelessFee\": 50,\n            \"duesAndAssessmentsFlg\": true,\n            \"passthruInterchgCostsFlg\": true\n        },\n        \"customFields\": []\n    },\n    \"ownerSiteUser\": {\n        \"firstName\": \"{{ownerFirstName}}\",\n        \"lastName\": \"{{ownerLastName}}\",\n        \"email\": \"RedWizard@redwizard.com\"\n    }\n}"
				},
				"url": {
					"raw": "{{copilotapi-url}}/merchant",
					"host": [
						"{{copilotapi-url}}"
					],
					"path": [
						"merchant"
					]
				},
				"description": "This is a request that creates the merchant using merchant API /merchant endpoint."
			},
			"response": []
		},
		{
			"name": "Create CardPointe Only Merchant - Required Fields Only",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							"var randomFirstName;",
							"var randomLastName;",
							"var signerFullName;",
							"var backEndMid;",
							"",
							"function setFirstName() {",
							"\trandomFirstName = pm.variables.replaceIn('{{$randomFirstName}}');",
							"\treturn randomFirstName.replace(/[^a-zA-Z0-9 ]/g, '');;",
							"}",
							"",
							"function setLastName() {",
							"\trandomLastName = pm.variables.replaceIn('{{$randomLastName}}');",
							"\treturn randomLastName.replace(/[^a-zA-Z0-9 ]/g, '');;",
							"}",
							"",
							"function setFullName() {",
							"    signerFullName = (randomFirstName + \" \" + randomLastName);",
							"    return signerFullName;",
							"}",
							"",
							"function generateRandom12DigitNumber() {",
							"  let randomNumber = '';",
							"  for (let i = 0; i < 12; i++) {",
							"    randomNumber += Math.floor(Math.random() * 10);",
							"  }",
							"  return randomNumber;",
							"}",
							"",
							"pm.collectionVariables.set(\"ownerFirstName\", setFirstName());",
							"pm.collectionVariables.set(\"ownerLastName\", setLastName());",
							"pm.collectionVariables.set(\"fullName\", setFullName());",
							"pm.collectionVariables.set(\"templateId\", \"21085\");",
							"pm.collectionVariables.set(\"salesCode\", \"RED GWO 2\");",
							"pm.collectionVariables.set(\"randomMID\", generateRandom12DigitNumber());",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"Successful POST request.\", function() {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);",
							"});",
							"",
							"pm.test(\"Response has a merchantId property.\", function() {",
							"    pm.expect(pm.response.json()).to.have.property(\"merchantId\");",
							"});",
							"",
							"pm.test(\"merchantId value is not null. (\" + pm.response.json().merchantId + \")\", function() {",
							"    pm.expect(pm.response.json().merchantId).to.not.equal(null);",
							"});",
							"",
							"pm.collectionVariables.set(\"merchantId\", jsonData.merchantId);",
							"",
							"console.log(pm.collectionVariables.get(\"randomMID\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{employee_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "X-CopilotAPI-Version",
						"value": "1.0"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"templateId\": \"{{templateId}}\",\n    \"merchant\": {\n        \"salesCode\": \"{{salesCode}}\",\n        \"dbaName\": \"DBA Red Wizard GWO\",\n        \"legalBusinessName\": \"Legal Red Wizard GWO\",\n        \"taxFilingMethod\": \"EIN\",\n        \"taxFilingName\": \"Filing Red Wizard GWO\",\n        \"demographic\": {\n            \"websiteAddress\": \"www.test.com\",\n            \"businessPhone\": \"302-876-9855\",\n            \"businessAddress\": {\n                \"address1\": \"443 E Main st\",\n                \"address2\": \"Apt. 23\",\n                \"city\": \"Newark\",\n                \"countryCd\": \"US\",\n                \"stateCd\": \"DE\",\n                \"zip\": \"19702\"\n            }\n        },\n        \"ownership\": {\n            \"owner\": {\n                \"ownerEmail\": \"redwizardgwo4@redwizardgwo4.com\",\n                \"ownerName\": \"{{fullName}}\",\n                \"ownerTitle\": \"CEO\",\n                \"ownerSSN\": \"232-33-4123\"\n            }\n        },\n        \"processing\": {\n            \"platformDetails\": {\n\t\t\t\t\"backEndMid\": \"{{randomMID}}\",\n                \"frontEndMid\": \"{{randomMID}}\",\n\t\t\t\t\"processorReportingMid\": \"{{randomMID}}\",\n                \"discoverProgramCd\": \"MAP\",\n                \"acquiringFlg\": false,\n                \"taxId\": \"485968574\",\n                \"tid\": \"96859685\",\n                \"mccId\": \"5812\"\n        },\n                    \"modeOfTransaction\": {\n                \"eCommercePct\": 100,\n                \"keyedPct\": 0,\n                \"mailOrderPct\": 0,\n                \"swipedPct\": 0\n            }\n        },\n        \"customFields\": []\n    },\n    \"ownerSiteUser\": {\n        \"firstName\": \"{{ownerFirstName}}\",\n        \"lastName\": \"{{ownerLastName}}\",\n        \"email\": \"RedWizard@redwizard.com\"\n    }\n}"
				},
				"url": {
					"raw": "{{copilotapi-url}}/merchant",
					"host": [
						"{{copilotapi-url}}"
					],
					"path": [
						"merchant"
					]
				},
				"description": "This is a request that creates the merchant using merchant API /merchant endpoint."
			},
			"response": []
		},
		{
			"name": "Submit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"pm.collectionVariables.set(\"merchant-id\", jsonData.merchantId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{employee_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-CopilotAPI-Version",
						"value": "1.0",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"signer\": {\r\n    \"email\": \"redwizardgwo@redwizardgwo.com\",\r\n    \"firstName\": \"{{ownerFirstName}}\",\r\n    \"lastName\": \"{{ownerLastName}}\",\r\n    \"ipAddress\": \"2.3.2.3\",\r\n    \"personalGuaranteeFlg\": true\r\n  }\r\n  \r\n}"
				},
				"url": {
					"raw": "{{copilotapi-url}}/merchant/{{merchantId}}/submit",
					"host": [
						"{{copilotapi-url}}"
					],
					"path": [
						"merchant",
						"{{merchantId}}",
						"submit"
					]
				},
				"description": "This is a merchant API request that bypasses signature when the merchant signs an actual application."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.get(\"environment\") === \"UAT\") {",
					"    pm.collectionVariables.set(\"employeeUsername\", \"uatUsername\");",
					"    pm.collectionVariables.set(\"employeePassword\", \"uatPassword\");",
					"    pm.collectionVariables.set(\"partnerUsername\", \"uatUsername\");",
					"    pm.collectionVariables.set(\"partnerPassword\", \"uatPassword\");",
					"} else if (pm.environment.get(\"environment\") === \"VAL\") {",
					"    pm.collectionVariables.set(\"employeeUsername\", \"valUsername\");",
					"    pm.collectionVariables.set(\"employeePassword\", \"valPassword\");",
					"    pm.collectionVariables.set(\"partnerUsername\", \"valUsername\");",
					"    pm.collectionVariables.set(\"partnerPassword\", \"valPassword\");",
					"} else if (pm.environment.get(\"environment\") === \"PROD\") {",
					"    pm.collectionVariables.set(\"employeeUsername\", \"prodUsername\");",
					"    pm.collectionVariables.set(\"employeePassword\", \"prodPassword\");",
					"    pm.collectionVariables.set(\"partnerUsername\", \"prodUsername\");",
					"    pm.collectionVariables.set(\"partnerPassword\", \"prodPassword\");",
					"} else {",
					"    //default credentials",
					"    pm.collectionVariables.set(\"employeeUsername\", \"mhajiadmin\");",
					"    pm.collectionVariables.set(\"employeePassword\", \"Happy123$\");",
					"    pm.collectionVariables.set(\"partnerUsername\", \"DROGONONEPARTNER@CARDCONNECT.COM\");",
					"    pm.collectionVariables.set(\"partnerPassword\", \"Happy123$\");",
					"    pm.collectionVariables.set(\"rabbitMqUsername\", \"gateway\");",
					"    pm.collectionVariables.set(\"rabbitMqPassword\", \"gfnlV4yBll2q\");",
					"    pm.collectionVariables.set(\"opsUsername\", \"opsapi\");",
					"    pm.collectionVariables.set(\"opsPassword\", \"Asuxc7GXZ5wu\")",
					"",
					"",
					"};",
					"",
					"",
					"pm.variables.set(\"getLastEight\", `(text)=> {",
					"    let orderId = text;",
					"    let lastEightOfOrderId = orderId.slice(-8);",
					"     return lastEightOfOrderId;",
					"}`);",
					"",
					"",
					"",
					"let done = false;",
					"let startTime = currentTimeSec();",
					"const currentAccessToken = pm.collectionVariables.get(\"employee_token\");",
					"",
					"function currentTimeSec() {",
					"    return Date.now() / 1000;",
					"}",
					"",
					"function getTokenExp(token) {",
					"    let base64 = token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/');",
					"    let jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {",
					"        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
					"    }).join(''));",
					"    return JSON.parse(jsonPayload).exp;",
					"}",
					"",
					"function waitForResponse() {",
					"    console.log(\"waiting for response...\");",
					"    if (!done && currentTimeSec() - startTime < 30) {",
					"        setTimeout(waitForResponse, 500);",
					"    }",
					"}",
					"",
					"function getAccessToken() {",
					"    console.log(\"getting new token for user \" + pm.collectionVariables.get(\"employeeUsername\"));",
					"",
					"    const clientId = pm.environment.get(\"client-id\");",
					"    const clientSecret = pm.environment.get(\"client-secret\");",
					"    const basicAuthHeader = \"Basic \" + btoa(clientId + \":\" + clientSecret);",
					"    const tokenRequest = {",
					"        url: pm.environment.get(\"token-url\"),",
					"        method: 'POST',",
					"        header: {",
					"            'Accept': 'application/json',",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"            'Authorization': basicAuthHeader",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"password\", disabled: false },",
					"                { key: \"username\", value: pm.collectionVariables.get(\"employeeUsername\"), disabled: false },",
					"                { key: \"password\", value: pm.collectionVariables.get(\"employeePassword\"), disabled: false }",
					"            ]",
					"        }",
					"    }",
					"",
					"    pm.sendRequest(tokenRequest, function (err, response) {",
					"       // console.log(err ? \"error: \" + JSON.stringify(err, null, 2) : \"response: \" + JSON.stringify(response.json(), null, 2));",
					"        if (!err) {",
					"            pm.collectionVariables.set(\"employee_token\", response.json().access_token)",
					"        }",
					"        done = true;",
					"    });",
					"",
					"    waitForResponse();",
					"}",
					"",
					"if (!currentAccessToken) {",
					"    console.log(\"no current access token\");",
					"    getAccessToken();",
					"} else if (getTokenExp(currentAccessToken) <= currentTimeSec()) {",
					"    console.log(\"access token expired\");",
					"    getAccessToken();",
					"}",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"",
					"",
					"pm.collectionVariables.set(\"test.autoRetryRequest\", `(request, prerequisite, test, maxWaitMs = 1200000, waitPeriodMs = 5000, startTime = new Date().getTime()) => {",
					"    let requestCallback = (err, res) => {",
					"        try {",
					"            //console.log(res.json());",
					"            prerequisite(err, res);",
					"            test(err, res);",
					"        } catch (e) {",
					"            let elapsedTime = new Date().getTime() - startTime;",
					"            if (elapsedTime > maxWaitMs) {",
					"            //console.log(res.json());",
					"            console.log(\"Game Over! The prerequisit is not as expected.\");",
					"                test(err, res);",
					"                postman.setNextRequest(null);",
					"",
					"            } else {",
					"            //console.log(elapsedTime + \"==>Try again...\")",
					"                setTimeout(() => autoRetryRequest(request, prerequisite, test, maxWaitMs, waitPeriodMs, startTime), waitPeriodMs);",
					"            }",
					"        }",
					"    };",
					"    function generateToken() {",
					"    if (pm.environment.get(\"environment\") === \"UAT\") {",
					"        pm.collectionVariables.set(\"employeeUsername\", \"uatUsername\");",
					"        pm.collectionVariables.set(\"employeePassword\", \"uatPassword\");",
					"        pm.collectionVariables.set(\"partnerUsername\", \"uatUsername\");",
					"        pm.collectionVariables.set(\"partnerPassword\", \"uatPassword\");",
					"    } else if (pm.environment.get(\"environment\") === \"VAL\") {",
					"        pm.collectionVariables.set(\"employeeUsername\", \"valUsername\");",
					"        pm.collectionVariables.set(\"employeePassword\", \"valPassword\");",
					"        pm.collectionVariables.set(\"partnerUsername\", \"valUsername\");",
					"        pm.collectionVariables.set(\"partnerPassword\", \"valPassword\");",
					"    } else if (pm.environment.get(\"environment\") === \"PROD\") {",
					"        pm.collectionVariables.set(\"employeeUsername\", \"prodUsername\");",
					"        pm.collectionVariables.set(\"employeePassword\", \"prodPassword\");",
					"        pm.collectionVariables.set(\"partnerUsername\", \"prodUsername\");",
					"        pm.collectionVariables.set(\"partnerPassword\", \"prodPassword\");",
					"    } else {",
					"        //default credentials",
					"        pm.collectionVariables.set(\"employeeUsername\", \"mhajiadmin\");",
					"        pm.collectionVariables.set(\"employeePassword\", \"Happy123$\");",
					"        pm.collectionVariables.set(\"partnerUsername\", \"DROGONONEPARTNER@CARDCONNECT.COM\");",
					"        pm.collectionVariables.set(\"partnerPassword\", \"Happy123$\");",
					"        pm.collectionVariables.set(\"rabbitMqUsername\", \"gateway\");",
					"        pm.collectionVariables.set(\"rabbitMqPassword\", \"gfnlV4yBll2q\");",
					"        pm.collectionVariables.set(\"opsUsername\", \"opsapi\");",
					"        pm.collectionVariables.set(\"opsPassword\", \"Asuxc7GXZ5wu\")",
					"",
					"",
					"    };",
					"",
					"",
					"    let done = false;",
					"    let startTime = currentTimeSec();",
					"    const currentAccessToken = pm.collectionVariables.get(\"employee_token\");",
					"",
					"    function currentTimeSec() {",
					"        return Date.now() / 1000;",
					"    }",
					"",
					"    function getTokenExp(token) {",
					"        let base64 = token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/');",
					"        let jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {",
					"            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
					"        }).join(''));",
					"        return JSON.parse(jsonPayload).exp;",
					"    }",
					"",
					"    function waitForResponse() {",
					"        console.log(\"waiting for response...\");",
					"        if (!done && currentTimeSec() - startTime < 30) {",
					"            setTimeout(waitForResponse, 500);",
					"        }",
					"    }",
					"",
					"    function getAccessToken() {",
					"        console.log(\"getting new token for user \" + pm.collectionVariables.get(\"employeeUsername\"));",
					"",
					"        const clientId = pm.environment.get(\"client-id\");",
					"        const clientSecret = pm.environment.get(\"client-secret\");",
					"        const basicAuthHeader = \"Basic \" + btoa(clientId + \":\" + clientSecret);",
					"        const tokenRequest = {",
					"            url: pm.environment.get(\"token-url\"),",
					"            method: 'POST',",
					"            header: {",
					"                'Accept': 'application/json',",
					"                'Content-Type': 'application/x-www-form-urlencoded',",
					"                'Authorization': basicAuthHeader",
					"            },",
					"            body: {",
					"                mode: 'urlencoded',",
					"                urlencoded: [",
					"                    { key: \"grant_type\", value: \"password\", disabled: false },",
					"                    { key: \"username\", value: pm.collectionVariables.get(\"employeeUsername\"), disabled: false },",
					"                    { key: \"password\", value: pm.collectionVariables.get(\"employeePassword\"), disabled: false }",
					"                ]",
					"            }",
					"        }",
					"",
					"        pm.sendRequest(tokenRequest, function (err, response) {",
					"            // console.log(err ? \"error: \" + JSON.stringify(err, null, 2) : \"response: \" + JSON.stringify(response.json(), null, 2));",
					"            if (!err) {",
					"                pm.collectionVariables.set(\"employee_token\", response.json().access_token)",
					"            }",
					"            done = true;",
					"        });",
					"",
					"        waitForResponse();",
					"    }",
					"",
					"    if (!currentAccessToken) {",
					"        console.log(\"no current access token\");",
					"        getAccessToken();",
					"    } else if (getTokenExp(currentAccessToken) <= currentTimeSec()) {",
					"        console.log(\"access token expired\");",
					"        getAccessToken();",
					"    }",
					"}",
					"   generateToken();",
					"    pm.request.headers.upsert({key:'Authorization', value:'Bearer ' +  pm.collectionVariables.get(\"employee_token\")});",
					"    pm.sendRequest(request, requestCallback);",
					"}`);",
					"",
					"pm.collectionVariables.set(\"validateTest\", `(test)=>{",
					"            pm.environment.set(\"numTests\",numTests++);",
					"            if (test) {",
					"            pm.environment.set(\"numPassed\",numPassed++);",
					"            }",
					"        }`);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "employeePassword",
			"value": "Happy123$"
		},
		{
			"key": "employeeUsername",
			"value": "mhajiadmin"
		},
		{
			"key": "partnerPassword",
			"value": "Happy123$"
		},
		{
			"key": "partnerUsername",
			"value": "DROGONONEPARTNER@CARDCONNECT.COM"
		},
		{
			"key": "rabbitMqPassword",
			"value": "gfnlV4yBll2q"
		},
		{
			"key": "rabbitMqUsername",
			"value": "gateway"
		},
		{
			"key": "fullName",
			"value": "Abel Beatty"
		},
		{
			"key": "ownerFirstName",
			"value": "Abel"
		},
		{
			"key": "ownerLastName",
			"value": "Beatty"
		},
		{
			"key": "salesCode",
			"value": "QUALIFYING"
		},
		{
			"key": "templateId",
			"value": "3062"
		},
		{
			"key": "test.autoRetryRequest",
			"value": "(request, prerequisite, test, maxWaitMs = 1200000, waitPeriodMs = 5000, startTime = new Date().getTime()) => {\n    let requestCallback = (err, res) => {\n        try {\n            //console.log(res.json());\n            prerequisite(err, res);\n            test(err, res);\n        } catch (e) {\n            let elapsedTime = new Date().getTime() - startTime;\n            if (elapsedTime > maxWaitMs) {\n            //console.log(res.json());\n            console.log(\"Game Over! The prerequisit is not as expected.\");\n                test(err, res);\n                postman.setNextRequest(null);\n\n            } else {\n            //console.log(elapsedTime + \"==>Try again...\")\n                setTimeout(() => autoRetryRequest(request, prerequisite, test, maxWaitMs, waitPeriodMs, startTime), waitPeriodMs);\n            }\n        }\n    };\n    function generateToken() {\n    if (pm.environment.get(\"environment\") === \"UAT\") {\n        pm.collectionVariables.set(\"employeeUsername\", \"uatUsername\");\n        pm.collectionVariables.set(\"employeePassword\", \"uatPassword\");\n        pm.collectionVariables.set(\"partnerUsername\", \"uatUsername\");\n        pm.collectionVariables.set(\"partnerPassword\", \"uatPassword\");\n    } else if (pm.environment.get(\"environment\") === \"VAL\") {\n        pm.collectionVariables.set(\"employeeUsername\", \"valUsername\");\n        pm.collectionVariables.set(\"employeePassword\", \"valPassword\");\n        pm.collectionVariables.set(\"partnerUsername\", \"valUsername\");\n        pm.collectionVariables.set(\"partnerPassword\", \"valPassword\");\n    } else if (pm.environment.get(\"environment\") === \"PROD\") {\n        pm.collectionVariables.set(\"employeeUsername\", \"prodUsername\");\n        pm.collectionVariables.set(\"employeePassword\", \"prodPassword\");\n        pm.collectionVariables.set(\"partnerUsername\", \"prodUsername\");\n        pm.collectionVariables.set(\"partnerPassword\", \"prodPassword\");\n    } else {\n        //default credentials\n        pm.collectionVariables.set(\"employeeUsername\", \"mhajiadmin\");\n        pm.collectionVariables.set(\"employeePassword\", \"Happy123$\");\n        pm.collectionVariables.set(\"partnerUsername\", \"DROGONONEPARTNER@CARDCONNECT.COM\");\n        pm.collectionVariables.set(\"partnerPassword\", \"Happy123$\");\n        pm.collectionVariables.set(\"rabbitMqUsername\", \"gateway\");\n        pm.collectionVariables.set(\"rabbitMqPassword\", \"gfnlV4yBll2q\");\n        pm.collectionVariables.set(\"opsUsername\", \"opsapi\");\n        pm.collectionVariables.set(\"opsPassword\", \"Asuxc7GXZ5wu\")\n\n\n    };\n\n\n    let done = false;\n    let startTime = currentTimeSec();\n    const currentAccessToken = pm.collectionVariables.get(\"employee_token\");\n\n    function currentTimeSec() {\n        return Date.now() / 1000;\n    }\n\n    function getTokenExp(token) {\n        let base64 = token.split('.')[1].replace(/-/g, '+').replace(/_/g, '/');\n        let jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload).exp;\n    }\n\n    function waitForResponse() {\n        console.log(\"waiting for response...\");\n        if (!done && currentTimeSec() - startTime < 30) {\n            setTimeout(waitForResponse, 500);\n        }\n    }\n\n    function getAccessToken() {\n        console.log(\"getting new token for user \" + pm.collectionVariables.get(\"employeeUsername\"));\n\n        const clientId = pm.environment.get(\"client-id\");\n        const clientSecret = pm.environment.get(\"client-secret\");\n        const basicAuthHeader = \"Basic \" + btoa(clientId + \":\" + clientSecret);\n        const tokenRequest = {\n            url: pm.environment.get(\"token-url\"),\n            method: 'POST',\n            header: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': basicAuthHeader\n            },\n            body: {\n                mode: 'urlencoded',\n                urlencoded: [\n                    { key: \"grant_type\", value: \"password\", disabled: false },\n                    { key: \"username\", value: pm.collectionVariables.get(\"employeeUsername\"), disabled: false },\n                    { key: \"password\", value: pm.collectionVariables.get(\"employeePassword\"), disabled: false }\n                ]\n            }\n        }\n\n        pm.sendRequest(tokenRequest, function (err, response) {\n            // console.log(err ? \"error: \" + JSON.stringify(err, null, 2) : \"response: \" + JSON.stringify(response.json(), null, 2));\n            if (!err) {\n                pm.collectionVariables.set(\"employee_token\", response.json().access_token)\n            }\n            done = true;\n        });\n\n        waitForResponse();\n    }\n\n    if (!currentAccessToken) {\n        console.log(\"no current access token\");\n        getAccessToken();\n    } else if (getTokenExp(currentAccessToken) <= currentTimeSec()) {\n        console.log(\"access token expired\");\n        getAccessToken();\n    }\n}\n   generateToken();\n    pm.request.headers.upsert({key:'Authorization', value:'Bearer ' +  pm.collectionVariables.get(\"employee_token\")});\n    pm.sendRequest(request, requestCallback);\n}"
		},
		{
			"key": "validateTest",
			"value": "(test)=>{\n            pm.environment.set(\"numTests\",numTests++);\n            if (test) {\n            pm.environment.set(\"numPassed\",numPassed++);\n            }\n        }"
		},
		{
			"key": "opsPassword",
			"value": "Asuxc7GXZ5wu"
		},
		{
			"key": "opsUsername",
			"value": "opsapi"
		},
		{
			"key": "ops_access_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ0Zzk2TG1NT3VvS0lHd1dGRWFaV0EtWnpNYU96REgyeEs0WEhSME1lWTBnIn0.eyJleHAiOjE2MDcxMTY3NzgsImlhdCI6MTYwNzExNjQ3OCwianRpIjoiNDAwZGRhOTUtNWU3Zi00NDBkLTgyNjctNGNlZTQyZDZlZDZmIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy1xYS5jYXJkY29ubmVjdC5jb20vYXV0aC9yZWFsbXMvY2FyZGNvbm5lY3QiLCJzdWIiOiJmOmMwMTI1YTgzLWI0OTUtNDU5Yy04OTkyLWYzYTBiYjhhNmNlZToyNTU3MzAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJvcmRlci1wcm9jZXNzaW5nLXNlcnZpY2UiLCJzZXNzaW9uX3N0YXRlIjoiZDc1OGY2Y2EtOGNhMC00YTY5LTlhY2MtODYzZGQyZjlmYTlkIiwiYWNyIjoiMSIsInNjb3BlIjoiIiwic2l0ZVVzZXIiOnsicm9sZSI6IlNBRE1JTiIsInBlcm1pc3Npb25zIjpbIkJPQVJESU5HX1NWQ19HQVRFV0FZIiwiRVFVSVBNRU5UX0NSRUFURSIsIkVRVUlQTUVOVF9SRUFEIiwiRVFVSVBNRU5UX1NFQVJDSCIsIkVRVUlQTUVOVF9VUERBVEUiLCJNRVJDSEFOVF9SRUFEIiwiTUVSQ0hBTlRfVVBEQVRFIiwiUEFSVE5FUl9SRUFEIl0sImlkIjoiMjU1NzMwIiwidHlwZSI6NCwiZW1haWwiOiJvcHNAY2FyZGNvbm5lY3QuY29tIiwidXNlcm5hbWUiOiJvcHNhcGkifX0.im7p1yiGK7k-5Apmvsvfcm5Hgd9uwfTtSO0CuASW2GsRRyYyktGWdnia9bL-kXzHNt8iQ-3OG641piazzO6Lnd894CqKZJIQbhuGXHVUdEgo49y-B6tGSWIJAx4JzXPPyy_VjXzuppbYL2WtEOe78R3YoITmdck4xTdovVpq0e5kUpFs7SSusEMIAIaAAlnGLevNDtCDYIZzzLTxIyU4j01xuAFVz213BuIQR7WzIIBxfaXU9RHOMvbZoGmQ1TVOUGjcO-CPFuaQf8Z8o31jXttsdxGU0aTu6gS4CYteSOj_sb4Y30ozrqBNze2RDgjTNuIg0ku2pAhkGKi8TkB3UQ"
		},
		{
			"key": "employee_token",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ0Zzk2TG1NT3VvS0lHd1dGRWFaV0EtWnpNYU96REgyeEs0WEhSME1lWTBnIn0.eyJleHAiOjE2MTYxMDAxOTEsImlhdCI6MTYxNjA5OTg5MSwianRpIjoiNTU5NzY3MWYtNDU0NC00NTA5LTlhMjUtNGU2MzAyNTU3Yjg0IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy1xYS5jYXJkY29ubmVjdC5jb20vYXV0aC9yZWFsbXMvY2FyZGNvbm5lY3QiLCJzdWIiOiJmOmMwMTI1YTgzLWI0OTUtNDU5Yy04OTkyLWYzYTBiYjhhNmNlZTo3Njg4MCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImNvcGlsb3QiLCJzZXNzaW9uX3N0YXRlIjoiYzczN2VkNTYtZjA4Mi00NDQxLTljMzQtZmM5N2E3ZDA2ZjY5IiwiYWNyIjoiMSIsInNjb3BlIjoicHVibGljLWFwcGxpY2F0aW9uLWNsaWVudCBjb3BpbG90IiwiY2NVc2VySWQiOiI3Njg4MCIsImNjVU5hbWUiOiJtaGFqaWFkbWluIn0.ZBI0N96146-h7Zbj0VE5jTlyr0RM9RIzU9hQojuoKXotJZoHa0YpEpc5xq1wSgce6n2DEjTPyfwBPYCbXMyjovK7w-ThxhrghZo0QulFewc82XVoeStsQMYbuLTI949yRkkVxHdG_r3q5XRnex4MMoiHvfWzAXo-7lHMH2uBPHe3W99WamvYzkGI7WKlel5lMKZ5ZEhU_i1xTtiHouh4pJMm4o3mzP9X0dflfXYKI1Iqh2XUTdDeqlrNcHEeopaCy5KaeXWyTHbNoTDB64lkgu-CymR2-C_zH3J_sfgONlWFgouIx5hP5PejzJenTWm9H5l6PAB7tX6q1RUHt3erxA"
		},
		{
			"key": "stationHsnNumber",
			"value": ""
		},
		{
			"key": "merchantId",
			"value": ""
		},
		{
			"key": "backEndMid",
			"value": ""
		},
		{
			"key": "KC_LOGIN_URL",
			"value": ""
		},
		{
			"key": "orderIdToBeProcessed",
			"value": ""
		},
		{
			"key": "unsuccessfulCallsCounter",
			"value": ""
		},
		{
			"key": "serialNumber",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "merchantEquipmentId",
			"value": ""
		},
		{
			"key": "externalOrderId",
			"value": ""
		},
		{
			"key": "randomMID",
			"value": ""
		}
	]
}
