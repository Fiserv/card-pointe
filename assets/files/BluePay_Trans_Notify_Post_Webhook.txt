###
# BluePay 2.0 Trans Notify POST

# Last Update: 2022-02-09

# Description

BluePay has the capability to send a merchant a notification after a transaction has run. This 
is accomplished via an HTTP POST to the customer's server. The notification provides details 
of the transaction.  BluePay expects a response of '200' from the customer's server; if a 
response of other than 200 is received the POST is assumed to have failed on the customer's 
end, and may be retried.

# Format

Within the body of that POST are uri-encoded name=value pairs containing the field names and 
values listed below. 

# Output

TPS_HASH_TYPE
  The algorithm used to compute the BP_STAMP. Possible values are 'MD5','SHA256', 'SHA512', 
  'HMAC_SHA256', or 'HMAC_SHA512'. See BP_STAMP section for more details. 
BP_STAMP_DEF
  List of the fields used to calculate the BP_STAMP. See BP_STAMP section for more details. 
BP_STAMP
  Length 32, 64, or 128 (depends on TPS_HASH_TYPE)
  Hash of the merchant's Secret Key and a string concatenation of the values of various fields 
  returned from BluePay. The exact fields and their order are determined by BP_STAMP_DEF, and 
  the hash type used is determined by the TPS_HASH_TYPE. This is similar to how the 
  TAMPER_PROOF_SEAL is handled on inbound APIs. See BP_STAMP section for more details. 
account_id
  Length 12
  The gateway account ID used to process the transaction.
trans_id
  Length 12
  The 12-digit transaction ID assigned to this transaction by BluePay.
master_id
  Length 12
  If this transaction references a prior transaction (such as for REFUND, or VOID) it will be 
  here.
rebill_id
  Length 12
  If transaction was part of rebilling this field contains the id of that rebilling.
card_account
  Maximum length 32
  The payment account used for the transaction. If a credit card is used, 12 x's followed by 
  the last four digits will be returned. If a check is used the following string is returned 
  "<account type>:<routing number>:<x's><last four digits of account number>" 
  ie. "C:123123123:xxxxxx4321" 
  Account Type: 'C' is checking and 'S' is savings.
card_expire
  Length 4
  Expiration date for a credit card. This will be blank for an ACH.
bank_name
  Maximum length 64
  The name of the card issuing bank or bank ACH account.
amount
  Maximum length 9
  The monetary amount for which the transaction was run.
trans_status
  Length 1
  '1' for approved, '0' for declined, 'E' for error.
fancy_status
  Word description of the transaction status.
trans_type
  Maximum length 8
  The type of transaction run.
  'AUTH'
  'CAPTURE'
  'CREDIT'
  'REFUND'
  'SALE'
  'VOID'
card_type
  Maximum length 4
  A four-character indicator of the credit card type used, if any.  Possible values are:
   AMEX = American Express, 
   MC   = MasterCard, 
   DISC = Discover, 
   VISA = VISA, 
   JCB  = JCB, 
   DCCB = Diner's Club or Carte Blanche,
   ENRT = EnRoute,
   BNKC = BankCard,
   SWTC = Switch,
   SOLO = Solo
payment_type
  Maximum length 8
  Can be 'ACH' for ACH transactions, or 'CREDIT' for credit card transactions.
origin
  Maximum length 16 
  Where the transaction originated.  Possible values are:
  bp10emu:      Weblink
  bp20post:     Weblink 2
  asbyemu:      Assurebuy Emulation mode
  a.net-aim:    Authorize.net Emulation mode
  VTerm:        Input on Virtual Terminal
  AGG:          Aggregation
  BATCH:        
  CAPQUEUE:     
  FRAUDSCRUB:   
  REBILL:       
  REJECT:       Automatic reject or chargeback from bank
order_id
  Maximum length 128
  The merchant-supplied or system supplied order id.
invoice_id
  Maximum length 64
  The merchant-supplied or system supplied invoice id.

name1
  Maximum length 32
  The cardholder's name 1.
name2
  Maximum length 32
  The cardholder's name 2.
company_name
  Maximum length 64
  The cardholder's company.
addr1
  Maximum length 64
  The cardholder's address 1.
addr2
  Maximum length 64
  The cardholder's address 2.
city
  Maximum length 32
  The cardholder's city.
state
  Maximum length 16
  The cardholder's state.
zip
  Maximum length 16
  The cardholder's zip.
country
  Maximum length 64
  The cardholder's country
memo
  Maximum length 128
  A memo that was submitted with the transaction.
phone
  Maximum length 16
  The cardholder's phone number.
email
  Maximum length 64
  The cardholder's email address.
auth_code
  Maximum length 8
  The authorization code returned by the front end processor. This field will display the 
  reject code on ACH VOIDS.
message
  Maximum length 64
  Message value returned by the card issuing bank.
issue_date
  Type: timestamp without time zone
  The date that the transaction was entered into BluePay. ie. "yyyy-mm-dd hh:mm:ss" 
avs_result
  Maximum length 1
  The AVS result returned by the front end processor.
cvv2_result
  Maximum length 1
  The CVV2 result returned by the front end processor.
custom_id1
  Maximum length 16
  The merchant-supplied value for Custom ID 1.
custom_id2
  Maximum length 64
  The merchant-supplied value for Custom ID 2.
f_void
  Length 1
  A flag to identify if the transaction was a void.
account_name
  Maximum length 32
  The name of the merchant's account in BluePay.
mode
  Maximum length 8
  LIVE or TEST.
dba_name
  Maximum length 128
  The name of the merchant.
merchdata
  All MERCHDATA values combined.
merchdata_xxxxx
  Each individual MERCHDATA value is returned. The merchant provided portion of the field name 
  will be lower case.
level_3_data
  All LV3 values combined. A linefeed character is inserted between records.
lodging_data
  All Lodging values combined.
vehicle_rental_data
  All Vehicle Rental values combined.

ach_same_day_funding
  Maximum length 1
  Available only for payment_type = 'ACH'. Contains the flag value (0 or 1) to indicate presence or absence of the same-day funding feature.
    1 (True) implies same-day funding
    0 (False) implies absence of same-day funding

validation_result
  Maximum length  2
  Status value that includes bank account validation results.
  
  Possible status values are:
  - '15': Known bad bank account. The transaction is immediately declined (validation fee charged for LIVE transactions)
  - '20': Unknown bank account but with a valid format (validation fee charged for LIVE transactions))
  - '25': Unknown bank account (validation fee charged for LIVE transactions))
  - '35': Bank account found but pending transaction settlement (validation fee charged for LIVE transactions))
  - '45': Known good bank account (validation fee charged for LIVE transactions)
  - 'B': Account validation bypassed (no validation fee charged)
  - 'R': Bank Account received known bad previously (no validation fee charged)
  - 'E': Error, Bank account validation failed (no validation fee charged)
  - null: Account validation not performed (no validation fee charged)

###############################
# BP_STAMP
###############################

BluePay uses cryptographic hash (or "digest") functions as a means of both protecting 
transaction data from being altered and ensuring that the transaction is genuine. A 
cryptographic hash function is an algorithm that maps data of any size to a bit string of a 
fixed size that cannot be deciphered. 

All merchants have a default hash type assigned to their account. This can be viewed and 
updated on the merchant's Account Admin page of BluePay's Gateway (https://secure.bluepay.com) 
under "Hash Type in APIs". When using this API, the TPS_HASH_TYPE will always be the 
merchant's "Hash Type in APIs".

The TPS_HASH_TYPE may be any of the following algorithms (in hexadecimal form):

MD5           Use md5sum or a similar program to calculate a 128-bit hash, then convert it 
              into hexadecimal form; result is 32 hexadecimal characters.
SHA256        Use sha256sum or a similar program to calculate a 256-bit hash, then convert it 
              into hexadecimal form; result is 64 hexadecimal characters.
SHA512        Use sha512sum or a similar program to calculate a 512-bit hash, then convert it 
              into hexadecimal form; result is 128 hexadecimal characters.

HMAC_SHA256   A 128-bit hash, resulting in a sequence of 64 hexadecimal characters.
HMAC_SHA512   A 128-bit hash, resulting in a sequence of 128 hexadecimal characters.

Steps to find the HMAC of either SHA256 (HMAC_SHA256) or SHA512 (HMAC_SHA512):

1. Compare the length of the key (the merchant's Secret Key) to the hash's input blocksize.
   SHA256 blocksize = 64, SHA512 blocksize = 128.
   If length of key is > blocksize, set the key's value to the hash of the original key.
   If length of key is < blocksize, pad the key to the right with zeros until its length 
   equals the blocksize.

2. Create the inner key (inner_key):
   Create an inner padding value of 0x36 repeated the blocksize number of times.
   Perform a bitwise exclusive-OR (XOR) on the key and the inner padding to create the inner 
   key.

3. Create the outer key (outer_key):
   Create an outer padding value of 0x5c repeated the blocksize number of times.
   Perform a bitwise exclusive-OR (XOR) on the key and the outer padding to create the outer 
   key.

4. Calculate the hash of the inner key concatenated with the text string, then calculate the 
   hash of the outer key concatenated with the previous hash result:
   hash(outer_key + hash(inner_key + string))

5. Convert the result into a hex string.
 
When using a program or function to calculate the BP_STAMP, make sure that it will accept a 
text string (or "message") argument and will return the hashed string (or "message digest") in 
hexadecimal form. 


###########################
# Calculating the BP_STAMP
###########################

STEP ONE
Concatenate the values of the fields that make up the BP_STAMP_DEF in same order that they are 
listed. Use "" (empty string - no space) as the value for any fields that are empty or 
unsent. The current BP_STAMP_DEF is ('+' represents string concatenation, and the field names 
represent the contents of the respective fields):

message  = trans_id + trans_status + trans_type + amount + batch_id + batch_status + 
           total_count + total_amount + bupload_id + rebill_id + reb_amount + status

STEP TWO
Calculate the expected BP_STAMP and compare that value to the BP_STAMP in the response to 
verify that the response is genuine. The hash type used is the TPS_HASH_TYPE provided in the 
response from BluePay).

- If TPS_HASH_TYPE is 'MD5', 'SHA256', or 'SHA512', find the md5sum, sha256sum, or sha512sum 
  of (the merchant's Secret Key + message) in hex format.

- If TPS_HASH_TYPE is 'HMAC_SHA256' or 'HMAC_SHA512', find the HMAC_SHA256 or HMAC_SHA512 of 
  (the merchant's Secret Key, message) in hex format.

Finally, the merchant should take the result and compare it to the value of BP_STAMP. If 
they match, the response is genuine. If they do not, the response has been tampered with 
somehow.


EXAMPLE:
Merchant B's account information is as follows:
  Secret Key = "abcdabcdabcdabcd"
  ACCOUNT_ID = "123412341234"

Merchant B's response post for a transaction might include the following output fields:
  TPS_HASH_TYPE = ? (we'll look at 3 examples)
  BP_STAMP      = ? (this differs based on the TPS_HASH_TYPE used)
  BP_STAMP_DEF  = "trans_id trans_status trans_type amount batch_id batch_status total_count 
                   total_amount bupload_id rebill_id reb_amount status"
  trans_id      =  "987654321001"
  trans_status  =  "1"
  trans_type    =  "SALE"
  amount        =  "199.99"
  rebill_id     =  "543215432154"

STEP ONE
Concatenate the values in the BP_STAMP_DEF to create a message string. Remember, if the field 
isn't returned or if the value is undefined, use an empty string as that field's value.
message  = trans_id + trans_status + trans_type + amount + batch_id + batch_status + 
           total_count + total_amount + bupload_id + rebill_id + reb_amount + status
         = "987654321001" + "1" + "SALE" + "199.99" + "" + "" + 
           "" + "" + "" + "543215432154" + "" + ""
         = "9876543210011SALE199.99543215432154"

STEP TWO
Calculate the expected BP_STAMP and compare that value to the BP_STAMP in the response to 
verify that the response is genuine. This step will vary depending on which TPS_HASH_TYPE is 
included in the response. 

-- If the merchant's "Hash Type in APIs" = "MD5", the response would include:
   TPS_HASH_TYPE = "MD5"
   BP_STAMP = "5793c242a688f07a0e3e05dbc438bfbf"

Expected BP_STAMP = md5sum( Secret Key + message ) in hex format
                  = md5sum("abcdabcdabcdabcd" + "9876543210011SALE199.99543215432154") in hex 
                    format 
                  = "5793c242a688f07a0e3e05dbc438bfbf"
Since the expected BP_STAMP matches the BP_STAMP from the response, the response is genuine.

-- If the merchant's "Hash Type in APIs" = "SHA256", the response would include:
   TPS_HASH_TYPE = "SHA256"
   BP_STAMP = "68eb34625aa9c466f6fd98f05bb362d66399a5d253e9ed7c02df891b0b1ab569"

Expected BP_STAMP = sha256sum( Secret Key + message ) in hex format
                  = sha256sum("abcdabcdabcdabcd" + "9876543210011SALE199.99543215432154") in hex 
                    format
                  = "68eb34625aa9c466f6fd98f05bb362d66399a5d253e9ed7c02df891b0b1ab569"
Since the expected BP_STAMP matches the BP_STAMP from the response, the response is genuine.

-- If the merchant's "Hash Type in APIs" = "HMAC_SHA256", the response would include:
   TPS_HASH_TYPE = "HMAC_SHA256"
   BP_STAMP = "58227eabad0c998141bbe62359176088a00ef037122370d10bba272429086900"

Expected BP_STAMP = HMAC_SHA256( Secret Key, message ) in hex format
                  = HMAC_SHA256("abcdabcdabcdabcd", "9876543210011SALE199.99543215432154") in hex 
                    format
                  = "58227eabad0c998141bbe62359176088a00ef037122370d10bba272429086900"
Since the expected BP_STAMP matches the BP_STAMP from the response, the response is genuine.